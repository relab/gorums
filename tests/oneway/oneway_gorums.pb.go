// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: oneway/oneway.proto

package oneway

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	proto "google.golang.org/protobuf/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// OnewayTestClient is the client interface for the OnewayTest service.
type OnewayTestClient interface {
	Multicast(ctx context.Context, in *Request, opts ...gorums.CallOption)
	MulticastPerNode(ctx context.Context, in *Request, f func(*Request, uint32) *Request, opts ...gorums.CallOption)
}

// enforce interface compliance
var _ OnewayTestClient = (*OnewayTestConfiguration)(nil)

// OnewayTestNodeClient is the single node client interface for the OnewayTest service.
type OnewayTestNodeClient interface {
	Unicast(ctx context.Context, in *Request, opts ...gorums.CallOption)
}

// enforce interface compliance
var _ OnewayTestNodeClient = (*OnewayTestNode)(nil)

// A OnewayTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type OnewayTestConfiguration struct {
	cfg *gorums.Configuration
}

func OnewayTestConfigurationRpc(cfg *gorums.Configuration) OnewayTestConfiguration {
	return OnewayTestConfiguration{
		cfg: cfg,
	}
}

// Multicast is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c OnewayTestConfiguration) Multicast(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "oneway.OnewayTest.Multicast",
	}

	c.cfg.Multicast(ctx, cd, opts...)
}

// MulticastPerNode is a quorum call invoked on each node in configuration c,

// with the argument returned by the provided function f,
// it returns the responses as an iterator.
// The per node function f receives a copy of the Request request argument and
// returns a Request manipulated to be passed to the given nodeID.
// The function f must be thread-safe.
func (c OnewayTestConfiguration) MulticastPerNode(ctx context.Context, in *Request, f func(*Request, uint32) *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "oneway.OnewayTest.MulticastPerNode",
	}

	cd.PerNodeArgFn = func(req proto.Message, nid uint32) proto.Message {
		return f(req.(*Request), nid)
	}

	c.cfg.Multicast(ctx, cd, opts...)
}

// OnewayTestNode holds the node specific methods for the OnewayTest service.
type OnewayTestNode struct {
	node *gorums.Node
}

func OnewayTestNodeRpc(node *gorums.Node) OnewayTestNode {
	return OnewayTestNode{
		node: node,
	}
}

// OnewayTestServer is the server-side API for the OnewayTest Service
type OnewayTestServer interface {
	Unicast(ctx gorums.ServerCtx, request *Request)
	Multicast(ctx gorums.ServerCtx, request *Request)
	MulticastPerNode(ctx gorums.ServerCtx, request *Request)
}

// RegisterOnewayTestServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterOnewayTestServer(srv *gorums.Server, impl OnewayTestServer) {
	srv.RegisterHandler("oneway.OnewayTest.Unicast", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		impl.Unicast(ctx, req)
	})
	srv.RegisterHandler("oneway.OnewayTest.Multicast", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		impl.Multicast(ctx, req)
	})
	srv.RegisterHandler("oneway.OnewayTest.MulticastPerNode", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		impl.MulticastPerNode(ctx, req)
	})
}

// Unicast is a one-way call; no replies are processed.
func (n OnewayTestNode) Unicast(ctx context.Context, in *Request, opts ...gorums.CallOption) {
	cd := gorums.CallData{
		Message: in,
		Method:  "oneway.OnewayTest.Unicast",
	}

	n.node.Unicast(ctx, cd, opts...)
}
