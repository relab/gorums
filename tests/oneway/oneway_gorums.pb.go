// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+d97bfa83
// 	protoc            v6.30.2
// source: oneway/oneway.proto

package oneway

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	proto "google.golang.org/protobuf/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// OnewayTestClient is the client interface for the OnewayTest service.
type OnewayTestClient interface {
	Multicast(ctx context.Context, in *Request, opts ...gorums.CallOption)
	MulticastPerNode(ctx context.Context, in *Request, f func(*Request, uint32) *Request, opts ...gorums.CallOption)
}

// enforce interface compliance
var _ OnewayTestClient = (*OnewayTestConfiguration)(nil)

// OnewayTestNodeClient is the single node client interface for the OnewayTest service.
type OnewayTestNodeClient interface {
	Unicast(ctx context.Context, in *Request, opts ...gorums.CallOption)
}

// enforce interface compliance
var _ OnewayTestNodeClient = (*OnewayTestNode)(nil)

// A OnewayTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type OnewayTestConfiguration struct {
	gorums.RawConfiguration
}

// NewOnewayTestConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewOnewayTestConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *OnewayTestConfiguration, err error) {
	c = &OnewayTestConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubOnewayTestConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *OnewayTestConfiguration) SubOnewayTestConfiguration(cfg gorums.NodeListOption) (subCfg *OnewayTestConfiguration, err error) {
	subCfg = &OnewayTestConfiguration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// OnewayTestConfigurationFromRaw returns a new OnewayTestConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func OnewayTestConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*OnewayTestConfiguration, error) {
	newCfg := &OnewayTestConfiguration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *OnewayTestConfiguration) Nodes() []*OnewayTestNode {
	rawNodes := c.RawConfiguration.Nodes()
	nodes := make([]*OnewayTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &OnewayTestNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *OnewayTestConfiguration) AllNodes() []*OnewayTestNode {
	rawNodes := c.RawConfiguration.AllNodes()
	nodes := make([]*OnewayTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &OnewayTestNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c OnewayTestConfiguration) And(d *OnewayTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c OnewayTestConfiguration) Except(rm *OnewayTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// Multicast is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c *OnewayTestConfiguration) Multicast(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "oneway.OnewayTest.Multicast",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// MulticastPerNode is a quorum call invoked on each node in configuration c,

// with the argument returned by the provided function f,
// it returns the responses as an iterator.
// The per node function f receives a copy of the Request request argument and
// returns a Request manipulated to be passed to the given nodeID.
// The function f must be thread-safe.
func (c *OnewayTestConfiguration) MulticastPerNode(ctx context.Context, in *Request, f func(*Request, uint32) *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "oneway.OnewayTest.MulticastPerNode",
	}

	cd.PerNodeArgFn = func(req proto.Message, nid uint32) proto.Message {
		return f(req.(*Request), nid)
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// OnewayTestNode holds the node specific methods for the OnewayTest service.
type OnewayTestNode struct {
	*gorums.RawNode
}

// OnewayTest is the server-side API for the OnewayTest Service
type OnewayTestServer interface {
	Unicast(ctx gorums.ServerCtx, request *Request)
	Multicast(ctx gorums.ServerCtx, request *Request)
	MulticastPerNode(ctx gorums.ServerCtx, request *Request)
}

func RegisterOnewayTestServer(srv *gorums.Server, impl OnewayTestServer) {
	srv.RegisterHandler("oneway.OnewayTest.Unicast", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		impl.Unicast(ctx, req)
	})
	srv.RegisterHandler("oneway.OnewayTest.Multicast", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		impl.Multicast(ctx, req)
	})
	srv.RegisterHandler("oneway.OnewayTest.MulticastPerNode", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		impl.MulticastPerNode(ctx, req)
	})
}

// Unicast is a one-way call; no replies are processed.
func (n *OnewayTestNode) Unicast(ctx context.Context, in *Request, opts ...gorums.CallOption) {
	cd := gorums.CallData{
		Message: in,
		Method:  "oneway.OnewayTest.Unicast",
	}

	n.RawNode.Unicast(ctx, cd, opts...)
}
