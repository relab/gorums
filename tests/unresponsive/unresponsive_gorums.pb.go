// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.8.0-devel
// 	protoc            v6.30.2
// source: unresponsive/unresponsive.proto

package unresponsive

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(8 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 8)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// A UnresponsiveConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type UnresponsiveConfiguration struct {
	gorums.RawConfiguration
	nodes []*UnresponsiveNode
}

// UnresponsiveQuorumSpecFromRaw returns a new UnresponsiveQuorumSpec from the given raw configuration.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func UnresponsiveConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*UnresponsiveConfiguration, error) {
	newCfg := &UnresponsiveConfiguration{
		RawConfiguration: rawCfg,
	}
	// initialize the nodes slice
	newCfg.nodes = make([]*UnresponsiveNode, newCfg.Size())
	for i, n := range rawCfg {
		newCfg.nodes[i] = &UnresponsiveNode{n}
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *UnresponsiveConfiguration) Nodes() []*UnresponsiveNode {
	return c.nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c UnresponsiveConfiguration) And(d *UnresponsiveConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c UnresponsiveConfiguration) Except(rm *UnresponsiveConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// UnresponsiveManager maintains a connection pool of nodes on
// which quorum calls can be performed.
type UnresponsiveManager struct {
	*gorums.RawManager
}

// NewUnresponsiveManager returns a new UnresponsiveManager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewUnresponsiveManager(opts ...gorums.ManagerOption) *UnresponsiveManager {
	return &UnresponsiveManager{
		RawManager: gorums.NewRawManager(opts...),
	}
}

// NewUnresponsiveConfiguration returns a UnresponsiveConfiguration based on the provided list of nodes (required).
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *UnresponsiveManager) NewConfiguration(cfg gorums.NodeListOption) (c *UnresponsiveConfiguration, err error) {
	c = &UnresponsiveConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, cfg)
	if err != nil {
		return nil, err
	}
	// initialize the nodes slice
	c.nodes = make([]*UnresponsiveNode, c.Size())
	for i, n := range c.RawConfiguration {
		c.nodes[i] = &UnresponsiveNode{n}
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *UnresponsiveManager) Nodes() []*UnresponsiveNode {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*UnresponsiveNode, len(gorumsNodes))
	for i, n := range gorumsNodes {
		nodes[i] = &UnresponsiveNode{n}
	}
	return nodes
}

// UnresponsiveNode holds the node specific methods for the Unresponsive service.
type UnresponsiveNode struct {
	*gorums.RawNode
}

// TestUnresponsive is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (n *UnresponsiveNode) TestUnresponsive(ctx context.Context, in *Empty) (resp *Empty, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "unresponsive.Unresponsive.TestUnresponsive",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Empty), err
}

// Unresponsive is the server-side API for the Unresponsive Service
type UnresponsiveServer interface {
	TestUnresponsive(ctx gorums.ServerCtx, request *Empty) (response *Empty, err error)
}

func RegisterUnresponsiveServer(srv *gorums.Server, impl UnresponsiveServer) {
	srv.RegisterHandler("unresponsive.Unresponsive.TestUnresponsive", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Empty)
		defer ctx.Release()
		resp, err := impl.TestUnresponsive(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
