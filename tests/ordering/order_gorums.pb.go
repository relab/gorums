// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+daaa6535
// 	protoc            v6.30.2
// source: ordering/order.proto

package ordering

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// GorumsTestClient is the client interface for the GorumsTest service.
type GorumsTestClient interface {
	QC(ctx context.Context, in *Request) gorums.Responses[*Response]
	QCAsync(ctx context.Context, in *Request) gorums.Responses[*Response]
}

// enforce interface compliance
var _ GorumsTestClient = (*GorumsTestConfiguration)(nil)

// GorumsTestNodeClient is the single node client interface for the GorumsTest service.
type GorumsTestNodeClient interface {
	UnaryRPC(ctx context.Context, in *Request) (resp *Response, err error)
}

// enforce interface compliance
var _ GorumsTestNodeClient = (*GorumsTestNode)(nil)

// A GorumsTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type GorumsTestConfiguration struct {
	gorums.RawConfiguration
}

// NewGorumsTestConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewGorumsTestConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *GorumsTestConfiguration, err error) {
	c = &GorumsTestConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubGorumsTestConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *GorumsTestConfiguration) SubGorumsTestConfiguration(cfg gorums.NodeListOption) (subCfg *GorumsTestConfiguration, err error) {
	subCfg = &GorumsTestConfiguration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// GorumsTestConfigurationFromRaw returns a new GorumsTestConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func GorumsTestConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*GorumsTestConfiguration, error) {
	newCfg := &GorumsTestConfiguration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *GorumsTestConfiguration) Nodes() []*GorumsTestNode {
	rawNodes := c.RawConfiguration.Nodes()
	nodes := make([]*GorumsTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &GorumsTestNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *GorumsTestConfiguration) AllNodes() []*GorumsTestNode {
	rawNodes := c.RawConfiguration.AllNodes()
	nodes := make([]*GorumsTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &GorumsTestNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c GorumsTestConfiguration) And(d *GorumsTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c GorumsTestConfiguration) Except(rm *GorumsTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// GorumsTestNode holds the node specific methods for the GorumsTest service.
type GorumsTestNode struct {
	*gorums.RawNode
}

// QC is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c *GorumsTestConfiguration) QC(ctx context.Context, in *Request) gorums.Responses[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "ordering.GorumsTest.QC",
		ServerStream: false,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// QCAsync is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c *GorumsTestConfiguration) QCAsync(ctx context.Context, in *Request) gorums.Responses[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "ordering.GorumsTest.QCAsync",
		ServerStream: false,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// UnaryRPC is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (n *GorumsTestNode) UnaryRPC(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "ordering.GorumsTest.UnaryRPC",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// GorumsTestServer is the server-side API for the GorumsTest Service
type GorumsTestServer interface {
	QC(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
	QCAsync(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
	UnaryRPC(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

func RegisterGorumsTestServer(srv *gorums.Server, impl GorumsTestServer) {
	srv.RegisterHandler("ordering.GorumsTest.QC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.QC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("ordering.GorumsTest.QCAsync", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.QCAsync(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("ordering.GorumsTest.UnaryRPC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.UnaryRPC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
