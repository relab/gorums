// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: ordering/order.proto

package ordering

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// GorumsTestClient is the client interface for the GorumsTest service.
type GorumsTestClient interface {
	QC(ctx context.Context, in *Request) gorums.Responses[*Response]
	QCAsync(ctx context.Context, in *Request) gorums.Responses[*Response]
}

// enforce interface compliance
var _ GorumsTestClient = (*GorumsTestConfiguration)(nil)

// GorumsTestNodeClient is the single node client interface for the GorumsTest service.
type GorumsTestNodeClient interface {
	UnaryRPC(ctx context.Context, in *Request) (resp *Response, err error)
}

// enforce interface compliance
var _ GorumsTestNodeClient = (*GorumsTestNode)(nil)

// A GorumsTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type GorumsTestConfiguration struct {
	cfg *gorums.Configuration
}

func GorumsTestConfigurationRpc(cfg *gorums.Configuration) GorumsTestConfiguration {
	return GorumsTestConfiguration{
		cfg: cfg,
	}
}

// GorumsTestNode holds the node specific methods for the GorumsTest service.
type GorumsTestNode struct {
	node *gorums.Node
}

func GorumsTestNodeRpc(node *gorums.Node) GorumsTestNode {
	return GorumsTestNode{
		node: node,
	}
}

// QC is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c GorumsTestConfiguration) QC(ctx context.Context, in *Request) gorums.Responses[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "ordering.GorumsTest.QC",
		ServerStream: false,
	}

	responses := c.cfg.QuorumCall(ctx, cd)
	return gorums.IterTypeCast[*Response](responses)
}

// QCAsync is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c GorumsTestConfiguration) QCAsync(ctx context.Context, in *Request) gorums.Responses[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "ordering.GorumsTest.QCAsync",
		ServerStream: false,
	}

	responses := c.cfg.QuorumCall(ctx, cd)
	return gorums.IterTypeCast[*Response](responses)
}

// UnaryRPC is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (n GorumsTestNode) UnaryRPC(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "ordering.GorumsTest.UnaryRPC",
	}

	res, err := n.node.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// GorumsTestServer is the server-side API for the GorumsTest Service
type GorumsTestServer interface {
	QC(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
	QCAsync(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
	UnaryRPC(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

// RegisterGorumsTestServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterGorumsTestServer(srv *gorums.Server, impl GorumsTestServer) {
	srv.RegisterHandler("ordering.GorumsTest.QC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.QC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("ordering.GorumsTest.QCAsync", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.QCAsync(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("ordering.GorumsTest.UnaryRPC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.UnaryRPC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
