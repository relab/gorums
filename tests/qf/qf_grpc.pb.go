// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package qf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QuorumFunctionClient is the client API for QuorumFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuorumFunctionClient interface {
	UseReq(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	IgnoreReq(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type quorumFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewQuorumFunctionClient(cc grpc.ClientConnInterface) QuorumFunctionClient {
	return &quorumFunctionClient{cc}
}

func (c *quorumFunctionClient) UseReq(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gorums.tests.qf.QuorumFunction/UseReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quorumFunctionClient) IgnoreReq(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gorums.tests.qf.QuorumFunction/IgnoreReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuorumFunctionServer is the server API for QuorumFunction service.
type QuorumFunctionServer interface {
	UseReq(context.Context, *Request) (*Response, error)
	IgnoreReq(context.Context, *Request) (*Response, error)
}

// UnimplementedQuorumFunctionServer can be embedded to have forward compatible implementations.
type UnimplementedQuorumFunctionServer struct {
}

func (*UnimplementedQuorumFunctionServer) UseReq(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseReq not implemented")
}
func (*UnimplementedQuorumFunctionServer) IgnoreReq(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoreReq not implemented")
}

func RegisterQuorumFunctionServer(s *grpc.Server, srv QuorumFunctionServer) {
	s.RegisterService(&_QuorumFunction_serviceDesc, srv)
}

func _QuorumFunction_UseReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuorumFunctionServer).UseReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorums.tests.qf.QuorumFunction/UseReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuorumFunctionServer).UseReq(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuorumFunction_IgnoreReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuorumFunctionServer).IgnoreReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorums.tests.qf.QuorumFunction/IgnoreReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuorumFunctionServer).IgnoreReq(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuorumFunction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorums.tests.qf.QuorumFunction",
	HandlerType: (*QuorumFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UseReq",
			Handler:    _QuorumFunction_UseReq_Handler,
		},
		{
			MethodName: "IgnoreReq",
			Handler:    _QuorumFunction_IgnoreReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qf/qf.proto",
}
