// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: dummy/dummy.proto

package dummy

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// A DummyConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type DummyConfiguration struct {
	cfg *gorums.Configuration
}

func DummyConfigurationRpc(cfg *gorums.Configuration) DummyConfiguration {
	return DummyConfiguration{
		cfg: cfg,
	}
}

// DummyNode holds the node specific methods for the Dummy service.
type DummyNode struct {
	node *gorums.Node
}

func DummyNodeRpc(node *gorums.Node) DummyNode {
	return DummyNode{
		node: node,
	}
}

// Test is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (n DummyNode) Test(ctx context.Context, in *Empty) (resp *Empty, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "dummy.Dummy.Test",
	}

	res, err := n.node.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Empty), err
}

// DummyServer is the server-side API for the Dummy Service
type DummyServer interface {
	Test(ctx gorums.ServerCtx, request *Empty) (response *Empty, err error)
}

// RegisterDummyServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterDummyServer(srv *gorums.Server, impl DummyServer) {
	srv.RegisterHandler("dummy.Dummy.Test", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Empty)
		defer ctx.Release()
		resp, err := impl.Test(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
