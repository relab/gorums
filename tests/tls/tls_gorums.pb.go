// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+a35cbf26
// 	protoc            v6.30.2
// source: tls/tls.proto

package tls

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// A TLSConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type TLSConfiguration struct {
	gorums.RawConfiguration
}

// NewTLSConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewTLSConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *TLSConfiguration, err error) {
	c = &TLSConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubTLSConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *TLSConfiguration) SubTLSConfiguration(cfg gorums.NodeListOption) (subCfg *TLSConfiguration, err error) {
	subCfg = &TLSConfiguration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// TLSConfigurationFromRaw returns a new TLSConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func TLSConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*TLSConfiguration, error) {
	newCfg := &TLSConfiguration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *TLSConfiguration) Nodes() []*TLSNode {
	rawNodes := c.RawConfiguration.Nodes()
	nodes := make([]*TLSNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &TLSNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *TLSConfiguration) AllNodes() []*TLSNode {
	rawNodes := c.RawConfiguration.AllNodes()
	nodes := make([]*TLSNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &TLSNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c TLSConfiguration) And(d *TLSConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c TLSConfiguration) Except(rm *TLSConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// TLSNode holds the node specific methods for the TLS service.
type TLSNode struct {
	*gorums.RawNode
}

// TestTLS is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (n *TLSNode) TestTLS(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "tls.TLS.TestTLS",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// TLSServer is the server-side API for the TLS Service
type TLSServer interface {
	TestTLS(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

// RegisterTLSServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterTLSServer(srv *gorums.Server, impl TLSServer) {
	srv.RegisterHandler("tls.TLS.TestTLS", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.TestTLS(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
