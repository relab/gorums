// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: tls/tls.proto

package tls

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// A TLSConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type TLSConfiguration struct {
	cfg *gorums.Configuration
}

func TLSConfigurationRpc(cfg *gorums.Configuration) TLSConfiguration {
	return TLSConfiguration{
		cfg: cfg,
	}
}

// TLSNode holds the node specific methods for the TLS service.
type TLSNode struct {
	node *gorums.Node
}

func TLSNodeRpc(node *gorums.Node) TLSNode {
	return TLSNode{
		node: node,
	}
}

// TestTLS is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (n TLSNode) TestTLS(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "tls.TLS.TestTLS",
	}

	res, err := n.node.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// TLSServer is the server-side API for the TLS Service
type TLSServer interface {
	TestTLS(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

// RegisterTLSServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterTLSServer(srv *gorums.Server, impl TLSServer) {
	srv.RegisterHandler("tls.TLS.TestTLS", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.TestTLS(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
