// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: correctable/correctable.proto

package correctable

import (
	context "context"
	gorums "github.com/relab/gorums"
	ordering "github.com/relab/gorums/ordering"
	encoding "google.golang.org/grpc/encoding"
	proto "google.golang.org/protobuf/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// CorrectableTestClient is the client interface for the CorrectableTest service.
type CorrectableTestClient interface {
	Correctable(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse]
	CorrectableStream(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse]
}

// enforce interface compliance
var _ CorrectableTestClient = (*CorrectableTestConfiguration)(nil)

// CorrectableTestNodeClient is the single node client interface for the CorrectableTest service.
type CorrectableTestNodeClient interface {
}

// enforce interface compliance
var _ CorrectableTestNodeClient = (*CorrectableTestNode)(nil)

// A CorrectableTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type CorrectableTestConfiguration struct {
	cfg *gorums.Configuration
}

func CorrectableTestConfigurationRpc(cfg *gorums.Configuration) CorrectableTestConfiguration {
	return CorrectableTestConfiguration{
		cfg: cfg,
	}
}

// CorrectableTestNode holds the node specific methods for the CorrectableTest service.
type CorrectableTestNode struct {
	node *gorums.Node
}

func CorrectableTestNodeRpc(node *gorums.Node) CorrectableTestNode {
	return CorrectableTestNode{
		node: node,
	}
}

// Correctable is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c CorrectableTestConfiguration) Correctable(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "correctable.CorrectableTest.Correctable",
		ServerStream: false,
	}

	responses := c.cfg.QuorumCall(ctx, cd)
	return gorums.IterTypeCast[*CorrectableResponse](responses)
}

// CorrectableStream is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.

// This is a streaming quorum call, so each can respond with any amount of responses.
func (c CorrectableTestConfiguration) CorrectableStream(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "correctable.CorrectableTest.CorrectableStream",
		ServerStream: true,
	}

	responses := c.cfg.QuorumCall(ctx, cd)
	return gorums.IterTypeCast[*CorrectableResponse](responses)
}

// CorrectableTestServer is the server-side API for the CorrectableTest Service
type CorrectableTestServer interface {
	Correctable(ctx gorums.ServerCtx, request *CorrectableRequest) (response *CorrectableResponse, err error)
	CorrectableStream(ctx gorums.ServerCtx, request *CorrectableRequest, send func(response *CorrectableResponse) error) error
}

// RegisterCorrectableTestServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterCorrectableTestServer(srv *gorums.Server, impl CorrectableTestServer) {
	srv.RegisterHandler("correctable.CorrectableTest.Correctable", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*CorrectableRequest)
		defer ctx.Release()
		resp, err := impl.Correctable(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("correctable.CorrectableTest.CorrectableStream", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*CorrectableRequest)
		defer ctx.Release()
		err := impl.CorrectableStream(ctx, req, func(resp *CorrectableResponse) error {
			// create a copy of the metadata, to avoid a data race between WrapMessage and SendMsg
			md := proto.Clone(in.Metadata)
			return gorums.SendMessage(ctx, finished, gorums.WrapMessage(md.(*ordering.Metadata), resp, nil))
		})
		if err != nil {
			gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, nil, err))
		}
	})
}
