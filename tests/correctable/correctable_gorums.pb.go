// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+a35cbf26
// 	protoc            v6.30.2
// source: correctable/correctable.proto

package correctable

import (
	context "context"
	gorums "github.com/relab/gorums"
	ordering "github.com/relab/gorums/ordering"
	encoding "google.golang.org/grpc/encoding"
	proto "google.golang.org/protobuf/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// CorrectableTestClient is the client interface for the CorrectableTest service.
type CorrectableTestClient interface {
	Correctable(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse]
	CorrectableStream(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse]
}

// enforce interface compliance
var _ CorrectableTestClient = (*CorrectableTestConfiguration)(nil)

// CorrectableTestNodeClient is the single node client interface for the CorrectableTest service.
type CorrectableTestNodeClient interface {
}

// enforce interface compliance
var _ CorrectableTestNodeClient = (*CorrectableTestNode)(nil)

// A CorrectableTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type CorrectableTestConfiguration struct {
	gorums.Configuration
}

// NewCorrectableTestConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewCorrectableTestConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *CorrectableTestConfiguration, err error) {
	c = &CorrectableTestConfiguration{}
	c.Configuration, err = gorums.NewConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubCorrectableTestConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *CorrectableTestConfiguration) SubCorrectableTestConfiguration(cfg gorums.NodeListOption) (subCfg *CorrectableTestConfiguration, err error) {
	subCfg = &CorrectableTestConfiguration{}
	subCfg.Configuration, err = c.SubConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// CorrectableTestConfigurationFromRaw returns a new CorrectableTestConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func CorrectableTestConfigurationFromRaw(rawCfg gorums.Configuration) (*CorrectableTestConfiguration, error) {
	newCfg := &CorrectableTestConfiguration{
		Configuration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *CorrectableTestConfiguration) Nodes() []*CorrectableTestNode {
	rawNodes := c.Configuration.Nodes()
	nodes := make([]*CorrectableTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &CorrectableTestNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *CorrectableTestConfiguration) AllNodes() []*CorrectableTestNode {
	rawNodes := c.Configuration.AllNodes()
	nodes := make([]*CorrectableTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &CorrectableTestNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c CorrectableTestConfiguration) And(d *CorrectableTestConfiguration) gorums.NodeListOption {
	return c.Configuration.And(d.Configuration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c CorrectableTestConfiguration) Except(rm *CorrectableTestConfiguration) gorums.NodeListOption {
	return c.Configuration.Except(rm.Configuration)
}

// CorrectableTestNode holds the node specific methods for the CorrectableTest service.
type CorrectableTestNode struct {
	*gorums.Node
}

// Correctable is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c *CorrectableTestConfiguration) Correctable(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "correctable.CorrectableTest.Correctable",
		ServerStream: false,
	}

	return gorums.QuorumCall[*CorrectableResponse](ctx, c.Configuration, cd)
}

// CorrectableStream is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.

// This is a streaming quorum call, so each can respond with any amount of responses.
func (c *CorrectableTestConfiguration) CorrectableStream(ctx context.Context, in *CorrectableRequest) gorums.Responses[*CorrectableResponse] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "correctable.CorrectableTest.CorrectableStream",
		ServerStream: true,
	}

	return gorums.QuorumCall[*CorrectableResponse](ctx, c.Configuration, cd)
}

// CorrectableTestServer is the server-side API for the CorrectableTest Service
type CorrectableTestServer interface {
	Correctable(ctx gorums.ServerCtx, request *CorrectableRequest) (response *CorrectableResponse, err error)
	CorrectableStream(ctx gorums.ServerCtx, request *CorrectableRequest, send func(response *CorrectableResponse) error) error
}

// RegisterCorrectableTestServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterCorrectableTestServer(srv *gorums.Server, impl CorrectableTestServer) {
	srv.RegisterHandler("correctable.CorrectableTest.Correctable", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*CorrectableRequest)
		defer ctx.Release()
		resp, err := impl.Correctable(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("correctable.CorrectableTest.CorrectableStream", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*CorrectableRequest)
		defer ctx.Release()
		err := impl.CorrectableStream(ctx, req, func(resp *CorrectableResponse) error {
			// create a copy of the metadata, to avoid a data race between WrapMessage and SendMsg
			md := proto.Clone(in.Metadata)
			return gorums.SendMessage(ctx, finished, gorums.WrapMessage(md.(*ordering.Metadata), resp, nil))
		})
		if err != nil {
			gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, nil, err))
		}
	})
}
