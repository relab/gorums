// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.8.0-devel
// 	protoc            v6.30.2
// source: correctable/correctable.proto

package correctable

import (
	context "context"
	fmt "fmt"
	gorums "github.com/relab/gorums"
	ordering "github.com/relab/gorums/ordering"
	encoding "google.golang.org/grpc/encoding"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(8 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 8)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// CorrectableTestClient is the client interface for the CorrectableTest service.
type CorrectableTestClient interface {
	Correctable(ctx context.Context, in *CorrectableRequest) *CorrectableCorrectableResponse
	CorrectableStream(ctx context.Context, in *CorrectableRequest) *CorrectableStreamCorrectableResponse
}

// enforce interface compliance
var _ CorrectableTestClient = (*CorrectableTestConfiguration)(nil)

// CorrectableTestNodeClient is the single node client interface for the CorrectableTest service.
type CorrectableTestNodeClient interface {
}

// enforce interface compliance
var _ CorrectableTestNodeClient = (*CorrectableTestNode)(nil)

// A CorrectableTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type CorrectableTestConfiguration struct {
	gorums.RawConfiguration
	qspec CorrectableTestQuorumSpec
	nodes []*CorrectableTestNode
}

// CorrectableTestQuorumSpecFromRaw returns a new CorrectableTestQuorumSpec from the given raw configuration and QuorumSpec.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func CorrectableTestConfigurationFromRaw(rawCfg gorums.RawConfiguration, qspec CorrectableTestQuorumSpec) (*CorrectableTestConfiguration, error) {
	// return an error if qspec is nil.
	if qspec == nil {
		return nil, fmt.Errorf("config: missing required QuorumSpec")
	}
	newCfg := &CorrectableTestConfiguration{
		RawConfiguration: rawCfg,
		qspec:            qspec,
	}
	// initialize the nodes slice
	newCfg.nodes = make([]*CorrectableTestNode, newCfg.Size())
	for i, n := range rawCfg {
		newCfg.nodes[i] = &CorrectableTestNode{n}
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *CorrectableTestConfiguration) Nodes() []*CorrectableTestNode {
	return c.nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c CorrectableTestConfiguration) And(d *CorrectableTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c CorrectableTestConfiguration) Except(rm *CorrectableTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// Correctable asynchronously invokes a correctable quorum call on each node
// in configuration c and returns a CorrectableCorrectableResponse, which can be used
// to inspect any replies or errors when available.
func (c *CorrectableTestConfiguration) Correctable(ctx context.Context, in *CorrectableRequest) *CorrectableCorrectableResponse {
	cd := gorums.CorrectableCallData{
		Message:      in,
		Method:       "correctable.CorrectableTest.Correctable",
		ServerStream: false,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, int, bool) {
		r := make(map[uint32]*CorrectableResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*CorrectableResponse)
		}
		return c.qspec.CorrectableQF(req.(*CorrectableRequest), r)
	}

	corr := c.RawConfiguration.CorrectableCall(ctx, cd)
	return &CorrectableCorrectableResponse{corr}
}

// CorrectableStream asynchronously invokes a correctable quorum call on each node
// in configuration c and returns a CorrectableStreamCorrectableResponse, which can be used
// to inspect any replies or errors when available.
// This method supports server-side preliminary replies (correctable stream).
func (c *CorrectableTestConfiguration) CorrectableStream(ctx context.Context, in *CorrectableRequest) *CorrectableStreamCorrectableResponse {
	cd := gorums.CorrectableCallData{
		Message:      in,
		Method:       "correctable.CorrectableTest.CorrectableStream",
		ServerStream: true,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, int, bool) {
		r := make(map[uint32]*CorrectableResponse, len(replies))
		for k, v := range replies {
			r[k] = v.(*CorrectableResponse)
		}
		return c.qspec.CorrectableStreamQF(req.(*CorrectableRequest), r)
	}

	corr := c.RawConfiguration.CorrectableCall(ctx, cd)
	return &CorrectableStreamCorrectableResponse{corr}
}

// CorrectableTestManager maintains a connection pool of nodes on
// which quorum calls can be performed.
type CorrectableTestManager struct {
	*gorums.RawManager
}

// NewCorrectableTestManager returns a new CorrectableTestManager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewCorrectableTestManager(opts ...gorums.ManagerOption) *CorrectableTestManager {
	return &CorrectableTestManager{
		RawManager: gorums.NewRawManager(opts...),
	}
}

// NewCorrectableTestConfiguration returns a CorrectableTestConfiguration based on the provided list of nodes (required)and a quorum specification.
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *CorrectableTestManager) NewConfiguration(cfg gorums.NodeListOption, qspec CorrectableTestQuorumSpec) (c *CorrectableTestConfiguration, err error) {
	c = &CorrectableTestConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, cfg)
	if err != nil {
		return nil, err
	}
	// return an error if qspec is nil.
	if qspec == nil {
		return nil, fmt.Errorf("config: missing required CorrectableTestQuorumSpec")
	}
	c.qspec = qspec
	// initialize the nodes slice
	c.nodes = make([]*CorrectableTestNode, c.Size())
	for i, n := range c.RawConfiguration {
		c.nodes[i] = &CorrectableTestNode{n}
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *CorrectableTestManager) Nodes() []*CorrectableTestNode {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*CorrectableTestNode, len(gorumsNodes))
	for i, n := range gorumsNodes {
		nodes[i] = &CorrectableTestNode{n}
	}
	return nodes
}

// CorrectableTestNode holds the node specific methods for the CorrectableTest service.
type CorrectableTestNode struct {
	*gorums.RawNode
}

// CorrectableTestQuorumSpec is the interface of quorum functions for CorrectableTest.
type CorrectableTestQuorumSpec interface {
	gorums.ConfigOption

	// CorrectableQF is the quorum function for the Correctable
	// correctable quorum call method. The in parameter is the request object
	// supplied to the Correctable method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *CorrectableRequest'.
	CorrectableQF(in *CorrectableRequest, replies map[uint32]*CorrectableResponse) (*CorrectableResponse, int, bool)

	// CorrectableStreamQF is the quorum function for the CorrectableStream
	// correctable stream quorum call method. The in parameter is the request object
	// supplied to the CorrectableStream method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *CorrectableRequest'.
	CorrectableStreamQF(in *CorrectableRequest, replies map[uint32]*CorrectableResponse) (*CorrectableResponse, int, bool)
}

// CorrectableTest is the server-side API for the CorrectableTest Service
type CorrectableTestServer interface {
	Correctable(ctx gorums.ServerCtx, request *CorrectableRequest) (response *CorrectableResponse, err error)
	CorrectableStream(ctx gorums.ServerCtx, request *CorrectableRequest, send func(response *CorrectableResponse) error) error
}

func RegisterCorrectableTestServer(srv *gorums.Server, impl CorrectableTestServer) {
	srv.RegisterHandler("correctable.CorrectableTest.Correctable", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*CorrectableRequest)
		defer ctx.Release()
		resp, err := impl.Correctable(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("correctable.CorrectableTest.CorrectableStream", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*CorrectableRequest)
		defer ctx.Release()
		err := impl.CorrectableStream(ctx, req, func(resp *CorrectableResponse) error {
			// create a copy of the metadata, to avoid a data race between WrapMessage and SendMsg
			md := proto.Clone(in.Metadata)
			return gorums.SendMessage(ctx, finished, gorums.WrapMessage(md.(*ordering.Metadata), resp, nil))
		})
		if err != nil {
			gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, nil, err))
		}
	})
}

type internalCorrectableResponse struct {
	nid   uint32
	reply *CorrectableResponse
	err   error
}

// CorrectableCorrectableResponse is a correctable object for processing replies.
type CorrectableCorrectableResponse struct {
	*gorums.Correctable
}

// Get returns the reply, level and any error associated with the
// called method. The method does not block until a (possibly
// intermediate) reply or error is available. Level is set to LevelNotSet if no
// reply has yet been received. The Done or Watch methods should be used to
// ensure that a reply is available.
func (c *CorrectableCorrectableResponse) Get() (*CorrectableResponse, int, error) {
	resp, level, err := c.Correctable.Get()
	if err != nil {
		return nil, level, err
	}
	return resp.(*CorrectableResponse), level, err
}

// CorrectableStreamCorrectableResponse is a correctable object for processing replies.
type CorrectableStreamCorrectableResponse struct {
	*gorums.Correctable
}

// Get returns the reply, level and any error associated with the
// called method. The method does not block until a (possibly
// intermediate) reply or error is available. Level is set to LevelNotSet if no
// reply has yet been received. The Done or Watch methods should be used to
// ensure that a reply is available.
func (c *CorrectableStreamCorrectableResponse) Get() (*CorrectableResponse, int, error) {
	resp, level, err := c.Correctable.Get()
	if err != nil {
		return nil, level, err
	}
	return resp.(*CorrectableResponse), level, err
}
