// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: metadata/metadata.proto

package metadata

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// A MetadataTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type MetadataTestConfiguration struct {
	cfg *gorums.Configuration
}

func MetadataTestConfigurationRpc(cfg *gorums.Configuration) MetadataTestConfiguration {
	return MetadataTestConfiguration{
		cfg: cfg,
	}
}

// MetadataTestNode holds the node specific methods for the MetadataTest service.
type MetadataTestNode struct {
	node *gorums.Node
}

func MetadataTestNodeRpc(node *gorums.Node) MetadataTestNode {
	return MetadataTestNode{
		node: node,
	}
}

// IDFromMD returns the 'id' field from the metadata.
func (n MetadataTestNode) IDFromMD(ctx context.Context, in *emptypb.Empty) (resp *NodeID, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "metadata.MetadataTest.IDFromMD",
	}

	res, err := n.node.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*NodeID), err
}

// WhatIP returns the address of the client that calls it.
func (n MetadataTestNode) WhatIP(ctx context.Context, in *emptypb.Empty) (resp *IPAddr, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "metadata.MetadataTest.WhatIP",
	}

	res, err := n.node.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*IPAddr), err
}

// MetadataTestServer is the server-side API for the MetadataTest Service
type MetadataTestServer interface {
	IDFromMD(ctx gorums.ServerCtx, request *emptypb.Empty) (response *NodeID, err error)
	WhatIP(ctx gorums.ServerCtx, request *emptypb.Empty) (response *IPAddr, err error)
}

// RegisterMetadataTestServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterMetadataTestServer(srv *gorums.Server, impl MetadataTestServer) {
	srv.RegisterHandler("metadata.MetadataTest.IDFromMD", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*emptypb.Empty)
		defer ctx.Release()
		resp, err := impl.IDFromMD(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("metadata.MetadataTest.WhatIP", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*emptypb.Empty)
		defer ctx.Release()
		resp, err := impl.WhatIP(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
