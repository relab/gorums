// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.8.0-devel
// 	protoc            v5.29.2
// source: config/config.proto

package config

import (
	context "context"
	fmt "fmt"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(8 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 8)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// ConfigTestClient is the client interface for the ConfigTest service.
type ConfigTestClient interface {
	Config(ctx context.Context, in *Request) (resp *Response, err error)
}

// enforce interface compliance
var _ ConfigTestClient = (*ConfigTestConfiguration)(nil)

// A ConfigTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type ConfigTestConfiguration struct {
	gorums.RawConfiguration
	qspec ConfigTestQuorumSpec
	nodes []*ConfigTestNode
} // ConfigTestQuorumSpecFromRaw returns a new ConfigTestQuorumSpec from the given raw configuration and QuorumSpec.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ConfigTestConfigurationFromRaw(rawCfg gorums.RawConfiguration, qspec ConfigTestQuorumSpec) (*ConfigTestConfiguration, error) {
	// return an error if qspec is nil.
	if qspec == nil {
		return nil, fmt.Errorf("config: missing required QuorumSpec")
	}
	newCfg := &ConfigTestConfiguration{
		RawConfiguration: rawCfg,
		qspec:            qspec,
	}
	// initialize the nodes slice
	newCfg.nodes = make([]*ConfigTestNode, newCfg.Size())
	for i, n := range rawCfg {
		newCfg.nodes[i] = &ConfigTestNode{n}
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *ConfigTestConfiguration) Nodes() []*ConfigTestNode {
	return c.nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c ConfigTestConfiguration) And(d *ConfigTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c ConfigTestConfiguration) Except(rm *ConfigTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// ConfigTestManager maintains a connection pool of nodes on
// which quorum calls can be performed.
type ConfigTestManager struct {
	*gorums.RawManager
}

// NewConfigTestManager returns a new ConfigTestManager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewConfigTestManager(opts ...gorums.ManagerOption) *ConfigTestManager {
	return &ConfigTestManager{
		RawManager: gorums.NewRawManager(opts...),
	}
} // NewConfigTestConfiguration returns a ConfigTestConfiguration based on the provided list of nodes (required)
// and a quorum specification
// .
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *ConfigTestManager) NewConfiguration(cfg gorums.NodeListOption, qspec ConfigTestQuorumSpec) (c *ConfigTestConfiguration, err error) {
	c = &ConfigTestConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, cfg)
	if err != nil {
		return nil, err
	}
	// return an error if qspec is nil.
	if qspec == nil {
		return nil, fmt.Errorf("config: missing required ConfigTestQuorumSpec")
	}
	c.qspec = qspec
	// initialize the nodes slice
	c.nodes = make([]*ConfigTestNode, c.Size())
	for i, n := range c.RawConfiguration {
		c.nodes[i] = &ConfigTestNode{n}
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *ConfigTestManager) Nodes() []*ConfigTestNode {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*ConfigTestNode, len(gorumsNodes))
	for i, n := range gorumsNodes {
		nodes[i] = &ConfigTestNode{n}
	}
	return nodes
}

// ConfigTestNode holds the node specific methods for the ConfigTest service.
type ConfigTestNode struct {
	*gorums.RawNode
}

// ConfigTestQuorumSpec is the interface of quorum functions for ConfigTest.
type ConfigTestQuorumSpec interface {
	gorums.ConfigOption

	// ConfigQF is the quorum function for the Config
	// quorum call method. The in parameter is the request object
	// supplied to the Config method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *Request'.
	ConfigQF(in *Request, replies map[uint32]*Response) (*Response, bool)
}

// Config is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *ConfigTestConfiguration) Config(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "config.ConfigTest.Config",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		return c.qspec.ConfigQF(req.(*Request), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// ConfigTest is the server-side API for the ConfigTest Service
type ConfigTestServer interface {
	Config(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

func RegisterConfigTestServer(srv *gorums.Server, impl ConfigTestServer) {
	srv.RegisterHandler("config.ConfigTest.Config", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.Config(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}

type internalResponse struct {
	nid   uint32
	reply *Response
	err   error
}
