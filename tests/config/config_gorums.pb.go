// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: config/config.proto

package config

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// ConfigTestClient is the client interface for the ConfigTest service.
type ConfigTestClient interface {
	Config(ctx context.Context, in *Request) gorums.Responses[*Response]
}

// enforce interface compliance
var _ ConfigTestClient = (*ConfigTestConfiguration)(nil)

// ConfigTestNodeClient is the single node client interface for the ConfigTest service.
type ConfigTestNodeClient interface {
}

// enforce interface compliance
var _ ConfigTestNodeClient = (*ConfigTestNode)(nil)

// A ConfigTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type ConfigTestConfiguration struct {
	cfg *gorums.Configuration
}

func ConfigTestConfigurationRpc(cfg *gorums.Configuration) ConfigTestConfiguration {
	return ConfigTestConfiguration{
		cfg: cfg,
	}
}

// ConfigTestNode holds the node specific methods for the ConfigTest service.
type ConfigTestNode struct {
	node *gorums.Node
}

func ConfigTestNodeRpc(node *gorums.Node) ConfigTestNode {
	return ConfigTestNode{
		node: node,
	}
}

// Config is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c ConfigTestConfiguration) Config(ctx context.Context, in *Request) gorums.Responses[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "config.ConfigTest.Config",
		ServerStream: false,
	}

	responses := c.cfg.QuorumCall(ctx, cd)
	return gorums.IterTypeCast[*Response](responses)
}

// ConfigTestServer is the server-side API for the ConfigTest Service
type ConfigTestServer interface {
	Config(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

// RegisterConfigTestServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterConfigTestServer(srv *gorums.Server, impl ConfigTestServer) {
	srv.RegisterHandler("config.ConfigTest.Config", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.Config(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
