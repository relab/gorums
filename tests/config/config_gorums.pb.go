// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+125b0cfb
// 	protoc            v6.30.2
// source: config/config.proto

package config

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

// A Configuration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type Configuration struct {
	gorums.RawConfiguration
}

// NewConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *Configuration, err error) {
	c = &Configuration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// ConfigurationFromRaw returns a new configuration from the given raw configuration.
//
//	cfg1, err := pb.NewConfiguration(nodeList, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig)
func ConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*Configuration, error) {
	newCfg := &Configuration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// SubConfiguration allows for making a new Configuration from the ManagerOption list and
// node list of another configuration,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *Configuration) SubConfiguration(cfg gorums.NodeListOption) (subCfg *Configuration, err error) {
	subCfg = &Configuration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// Close closes a configuration created from the NewConfiguration method
//
// NOTE: A configuration created with ConfigurationFromRaw or SubConfiguration closes and
// is closed when the original configuration or any of the subconfigurations are closed.
// If you want the configurations to be independent you need to use NewConfiguration
func (c *Configuration) Close() error {
	return c.RawConfiguration.Close()
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *Configuration) Nodes() []*Node {
	nodes := make([]*Node, c.Size())
	for i, n := range c.RawConfiguration.RawNodes {
		nodes[i] = &Node{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c *Configuration) And(d *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c *Configuration) Except(rm *Configuration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// Node encapsulates the state of a node on which a remote procedure call
// can be performed.
type Node struct {
	*gorums.RawNode
}

// ConfigTestClient is the client interface for the ConfigTest service.
type ConfigTestClient interface {
	Config(ctx context.Context, in *Request) gorums.Responses[*Response]
}

// enforce interface compliance
var _ ConfigTestClient = (*Configuration)(nil)

// Config is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c *Configuration) Config(ctx context.Context, in *Request) gorums.Responses[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "config.ConfigTest.Config",
		ServerStream: false,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// ConfigTest is the server-side API for the ConfigTest Service
type ConfigTestServer interface {
	Config(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

func RegisterConfigTestServer(srv *gorums.Server, impl ConfigTestServer) {
	srv.RegisterHandler("config.ConfigTest.Config", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.Config(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
