// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+87979cf3
// 	protoc            v6.30.2
// source: config/config.proto

package config

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// ConfigTestClient is the client interface for the ConfigTest service.
type ConfigTestClient interface {
	Config(ctx context.Context, in *Request) gorums.Responses[*Response]
}

// enforce interface compliance
var _ ConfigTestClient = (*ConfigTestConfiguration)(nil)

// ConfigTestNodeClient is the single node client interface for the ConfigTest service.
type ConfigTestNodeClient interface {
}

// enforce interface compliance
var _ ConfigTestNodeClient = (*ConfigTestNode)(nil)

// A ConfigTestConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type ConfigTestConfiguration struct {
	gorums.RawConfiguration
}

// NewConfigTestConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewConfigTestConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *ConfigTestConfiguration, err error) {
	c = &ConfigTestConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubConfigTestConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *ConfigTestConfiguration) SubConfigTestConfiguration(cfg gorums.NodeListOption) (subCfg *ConfigTestConfiguration, err error) {
	subCfg = &ConfigTestConfiguration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// ConfigTestConfigurationFromRaw returns a new ConfigTestConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ConfigTestConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*ConfigTestConfiguration, error) {
	newCfg := &ConfigTestConfiguration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *ConfigTestConfiguration) Nodes() []*ConfigTestNode {
	rawNodes := c.RawConfiguration.Nodes()
	nodes := make([]*ConfigTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ConfigTestNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *ConfigTestConfiguration) AllNodes() []*ConfigTestNode {
	rawNodes := c.RawConfiguration.AllNodes()
	nodes := make([]*ConfigTestNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ConfigTestNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c ConfigTestConfiguration) And(d *ConfigTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c ConfigTestConfiguration) Except(rm *ConfigTestConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// ConfigTestNode holds the node specific methods for the ConfigTest service.
type ConfigTestNode struct {
	*gorums.RawNode
}

// Config is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c *ConfigTestConfiguration) Config(ctx context.Context, in *Request) gorums.Responses[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "config.ConfigTest.Config",
		ServerStream: false,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// ConfigTestServer is the server-side API for the ConfigTest Service
type ConfigTestServer interface {
	Config(ctx gorums.ServerCtx, request *Request) (response *Response, err error)
}

func RegisterConfigTestServer(srv *gorums.Server, impl ConfigTestServer) {
	srv.RegisterHandler("config.ConfigTest.Config", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Request)
		defer ctx.Release()
		resp, err := impl.Config(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
