package gorums

import "fmt"

// ConfigOption is a marker interface for options to NewConfiguration.
type ConfigOption interface{}

// NodeListOption must be implemented by node providers.
type NodeListOption[NODE AsRawNode] interface {
	ConfigOption
	newConfig(*RawManager) (RawConfiguration[NODE], error)
}

type nodeIDMap[NODE AsRawNode] struct {
	idMap map[string]uint32
}

func (o nodeIDMap[NODE]) newConfig(mgr *RawManager) (nodes RawConfiguration[NODE], err error) {
	if len(o.idMap) == 0 {
		return nil, ConfigCreationError(fmt.Errorf("node-to-ID map required: WithNodeMap"))
	}
	nodes = make(RawConfiguration[NODE], 0, len(o.idMap))
	for naddr, id := range o.idMap {
		node, found := mgr.Node(id)
		if !found {
			node, err = NewRawNodeWithID(naddr, id)
			if err != nil {
				return nil, ConfigCreationError(err)
			}
			err = mgr.AddNode(node)
			if err != nil {
				return nil, ConfigCreationError(err)
			}
		}
		// NOTE: this only works because the interface AsRawNode
		// requires that the underlying type is struct { *RawNode }.
		nodes = append(nodes, NODE{node})
	}
	// Sort nodes to ensure deterministic iteration.
	OrderedBy(ID[NODE]).Sort(nodes)
	return nodes, nil
}

// WithNodeMap returns a NodeListOption containing the provided
// mapping from node addresses to application-specific IDs.
func WithNodeMap[NODE AsRawNode](idMap map[string]uint32) NodeListOption[NODE] {
	return &nodeIDMap[NODE]{idMap: idMap}
}

type nodeList[NODE AsRawNode] struct {
	addrsList []string
}

func (o nodeList[NODE]) newConfig(mgr *RawManager) (nodes RawConfiguration[NODE], err error) {
	if len(o.addrsList) == 0 {
		return nil, ConfigCreationError(fmt.Errorf("node addresses required: WithNodeList"))
	}
	nodes = make(RawConfiguration[NODE], 0, len(o.addrsList))
	for _, naddr := range o.addrsList {
		node, err := NewRawNode(naddr)
		if err != nil {
			return nil, ConfigCreationError(err)
		}
		if n, found := mgr.Node(node.ID()); !found {
			err = mgr.AddNode(node)
			if err != nil {
				return nil, ConfigCreationError(err)
			}
		} else {
			node = n
		}
		nodes = append(nodes, NODE{node})
	}
	// Sort nodes to ensure deterministic iteration.
	OrderedBy(ID[NODE]).Sort(nodes)
	return nodes, nil
}

// WithNodeList returns a NodeListOption containing the provided list of node addresses.
// With this option, node IDs are generated by the Manager.
func WithNodeList[NODE AsRawNode](addrsList []string) NodeListOption[NODE] {
	return &nodeList[NODE]{addrsList: addrsList}
}

type nodeIDs[NODE AsRawNode] struct {
	nodeIDs []uint32
}

func (o nodeIDs[NODE]) newConfig(mgr *RawManager) (nodes RawConfiguration[NODE], err error) {
	if len(o.nodeIDs) == 0 {
		return nil, ConfigCreationError(fmt.Errorf("node IDs required: WithNodeIDs"))
	}
	nodes = make(RawConfiguration[NODE], 0, len(o.nodeIDs))
	for _, id := range o.nodeIDs {
		node, found := mgr.Node(id)
		if !found {
			// Node IDs must have been registered previously
			return nil, ConfigCreationError(fmt.Errorf("node ID %d not found", id))
		}
		nodes = append(nodes, NODE{node})
	}
	// Sort nodes to ensure deterministic iteration.
	OrderedBy(ID[NODE]).Sort(nodes)
	return nodes, nil
}

// WithNodeIDs returns a NodeListOption containing a list of node IDs.
// This assumes that the provided node IDs have already been registered with the manager.
func WithNodeIDs[NODE AsRawNode](ids []uint32) NodeListOption[NODE] {
	return &nodeIDs[NODE]{nodeIDs: ids}
}

type addNodes[NODE AsRawNode] struct {
	old RawConfiguration[NODE]
	new NodeListOption[NODE]
}

func (o addNodes[NODE]) newConfig(mgr *RawManager) (nodes RawConfiguration[NODE], err error) {
	newNodes, err := o.new.newConfig(mgr)
	if err != nil {
		return nil, err
	}
	ac := &addConfig[NODE]{old: o.old, add: newNodes}
	return ac.newConfig(mgr)
}

// WithNewNodes returns a NodeListOption that can be used to create a new configuration
// combining c and the new nodes.
func (c RawConfiguration[NODE]) WithNewNodes(new NodeListOption[NODE]) NodeListOption[NODE] {
	return &addNodes[NODE]{old: c, new: new}
}

type addConfig[NODE AsRawNode] struct {
	old RawConfiguration[NODE]
	add RawConfiguration[NODE]
}

func (o addConfig[NODE]) newConfig(mgr *RawManager) (nodes RawConfiguration[NODE], err error) {
	nodes = make(RawConfiguration[NODE], 0, len(o.old)+len(o.add))
	m := make(map[uint32]bool)
	for _, n := range append(o.old, o.add...) {
		if !m[n.AsRaw().id] {
			m[n.AsRaw().id] = true
			nodes = append(nodes, n)
		}
	}
	// Sort nodes to ensure deterministic iteration.
	OrderedBy(ID[NODE]).Sort(nodes)
	return nodes, err
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c RawConfiguration[NODE]) And(d RawConfiguration[NODE]) NodeListOption[NODE] {
	return &addConfig[NODE]{old: c, add: d}
}

// WithoutNodes returns a NodeListOption that can be used to create a new configuration
// from c without the given node IDs.
func (c RawConfiguration[NODE]) WithoutNodes(ids ...uint32) NodeListOption[NODE] {
	rmIDs := make(map[uint32]bool)
	for _, id := range ids {
		rmIDs[id] = true
	}
	keepIDs := make([]uint32, 0, len(c))
	for _, cNode := range c {
		if !rmIDs[cNode.AsRaw().id] {
			keepIDs = append(keepIDs, cNode.AsRaw().id)
		}
	}
	return &nodeIDs[NODE]{nodeIDs: keepIDs}
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c RawConfiguration[NODE]) Except(rm RawConfiguration[NODE]) NodeListOption[NODE] {
	rmIDs := make(map[uint32]bool)
	for _, rmNode := range rm {
		rmIDs[rmNode.AsRaw().id] = true
	}
	keepIDs := make([]uint32, 0, len(c))
	for _, cNode := range c {
		if !rmIDs[cNode.AsRaw().id] {
			keepIDs = append(keepIDs, cNode.AsRaw().id)
		}
	}
	return &nodeIDs[NODE]{nodeIDs: keepIDs}
}
