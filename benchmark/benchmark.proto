syntax = "proto3";

package benchmark;

option go_package = "github.com/relab/gorums/benchmark";

import "gorums.proto";

message Echo { bytes payload = 1; }

message StartRequest {
  string Name = 1;
}

message StartResponse {}

message StopRequest {
  string Name = 1;
}

message StopResponse {
  string Name = 1;
  uint64 TotalOps = 2;
  int64 TotalTime = 3;
  double Throughput = 4;
  double LatencyAvg = 5;
  double LatencyVar = 6;
  uint64 AllocsPerOp = 7;
  uint64 MemPerOp = 8;
}

service Benchmark {
  rpc StartServerBenchmark(StartRequest) returns (StartResponse) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
  }

  rpc StopServerBenchmark(StopRequest) returns (StopResponse) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
  }

  // benchmarks
  rpc UnorderedQC(Echo) returns (Echo) { option (gorums.quorumcall) = true; }

  rpc OrderedQC(Echo) returns (Echo) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
  }

  rpc UnorderedAsync(Echo) returns (Echo) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
  }

  rpc OrderedAsync(Echo) returns (Echo) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
    option (gorums.async) = true;
  }

  rpc UnorderedSlowServer(Echo) returns (Echo) {
    option (gorums.quorumcall) = true;
  }

  rpc OrderedSlowServer(Echo) returns (Echo) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
  }

  rpc Multicast(stream Echo) returns (Echo) {
    option (gorums.multicast) = true;
  }
}
