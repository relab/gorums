// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package benchmark

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BenchmarkClient is the client API for Benchmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkClient interface {
	StartServerBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	StopServerBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Result, error)
	StartBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	StopBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*MemoryStat, error)
	// benchmarks
	UnorderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	OrderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	UnorderedAsync(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	OrderedAsync(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	UnorderedSlowServer(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	OrderedSlowServer(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	Multicast(ctx context.Context, in *TimedMsg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type benchmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkClient(cc grpc.ClientConnInterface) BenchmarkClient {
	return &benchmarkClient{cc}
}

func (c *benchmarkClient) StartServerBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StartServerBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) StopServerBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StopServerBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) StartBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StartBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) StopBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*MemoryStat, error) {
	out := new(MemoryStat)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StopBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) UnorderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/UnorderedQC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) OrderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/OrderedQC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) UnorderedAsync(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/UnorderedAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) OrderedAsync(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/OrderedAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) UnorderedSlowServer(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/UnorderedSlowServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) OrderedSlowServer(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/OrderedSlowServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) Multicast(ctx context.Context, in *TimedMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/Multicast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkServer is the server API for Benchmark service.
// All implementations must embed UnimplementedBenchmarkServer
// for forward compatibility
type BenchmarkServer interface {
	StartServerBenchmark(context.Context, *StartRequest) (*StartResponse, error)
	StopServerBenchmark(context.Context, *StopRequest) (*Result, error)
	StartBenchmark(context.Context, *StartRequest) (*StartResponse, error)
	StopBenchmark(context.Context, *StopRequest) (*MemoryStat, error)
	// benchmarks
	UnorderedQC(context.Context, *Echo) (*Echo, error)
	OrderedQC(context.Context, *Echo) (*Echo, error)
	UnorderedAsync(context.Context, *Echo) (*Echo, error)
	OrderedAsync(context.Context, *Echo) (*Echo, error)
	UnorderedSlowServer(context.Context, *Echo) (*Echo, error)
	OrderedSlowServer(context.Context, *Echo) (*Echo, error)
	Multicast(context.Context, *TimedMsg) (*empty.Empty, error)
	mustEmbedUnimplementedBenchmarkServer()
}

// UnimplementedBenchmarkServer must be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServer struct {
}

func (*UnimplementedBenchmarkServer) StartServerBenchmark(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServerBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) StopServerBenchmark(context.Context, *StopRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServerBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) StartBenchmark(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) StopBenchmark(context.Context, *StopRequest) (*MemoryStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) UnorderedQC(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnorderedQC not implemented")
}
func (*UnimplementedBenchmarkServer) OrderedQC(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderedQC not implemented")
}
func (*UnimplementedBenchmarkServer) UnorderedAsync(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnorderedAsync not implemented")
}
func (*UnimplementedBenchmarkServer) OrderedAsync(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderedAsync not implemented")
}
func (*UnimplementedBenchmarkServer) UnorderedSlowServer(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnorderedSlowServer not implemented")
}
func (*UnimplementedBenchmarkServer) OrderedSlowServer(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderedSlowServer not implemented")
}
func (*UnimplementedBenchmarkServer) Multicast(context.Context, *TimedMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multicast not implemented")
}
func (*UnimplementedBenchmarkServer) mustEmbedUnimplementedBenchmarkServer() {}

func RegisterBenchmarkServer(s *grpc.Server, srv BenchmarkServer) {
	s.RegisterService(&_Benchmark_serviceDesc, srv)
}

func _Benchmark_StartServerBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StartServerBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StartServerBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StartServerBenchmark(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_StopServerBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StopServerBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StopServerBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StopServerBenchmark(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_StartBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StartBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StartBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StartBenchmark(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_StopBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StopBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StopBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StopBenchmark(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_UnorderedQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).UnorderedQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/UnorderedQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).UnorderedQC(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_OrderedQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).OrderedQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/OrderedQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).OrderedQC(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_UnorderedAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).UnorderedAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/UnorderedAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).UnorderedAsync(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_OrderedAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).OrderedAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/OrderedAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).OrderedAsync(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_UnorderedSlowServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).UnorderedSlowServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/UnorderedSlowServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).UnorderedSlowServer(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_OrderedSlowServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).OrderedSlowServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/OrderedSlowServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).OrderedSlowServer(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_Multicast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).Multicast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/Multicast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).Multicast(ctx, req.(*TimedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Benchmark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "benchmark.Benchmark",
	HandlerType: (*BenchmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServerBenchmark",
			Handler:    _Benchmark_StartServerBenchmark_Handler,
		},
		{
			MethodName: "StopServerBenchmark",
			Handler:    _Benchmark_StopServerBenchmark_Handler,
		},
		{
			MethodName: "StartBenchmark",
			Handler:    _Benchmark_StartBenchmark_Handler,
		},
		{
			MethodName: "StopBenchmark",
			Handler:    _Benchmark_StopBenchmark_Handler,
		},
		{
			MethodName: "UnorderedQC",
			Handler:    _Benchmark_UnorderedQC_Handler,
		},
		{
			MethodName: "OrderedQC",
			Handler:    _Benchmark_OrderedQC_Handler,
		},
		{
			MethodName: "UnorderedAsync",
			Handler:    _Benchmark_UnorderedAsync_Handler,
		},
		{
			MethodName: "OrderedAsync",
			Handler:    _Benchmark_OrderedAsync_Handler,
		},
		{
			MethodName: "UnorderedSlowServer",
			Handler:    _Benchmark_UnorderedSlowServer_Handler,
		},
		{
			MethodName: "OrderedSlowServer",
			Handler:    _Benchmark_OrderedSlowServer_Handler,
		},
		{
			MethodName: "Multicast",
			Handler:    _Benchmark_Multicast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "benchmark/benchmark.proto",
}
