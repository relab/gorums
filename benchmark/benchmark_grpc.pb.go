// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package benchmark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BenchmarkClient is the client API for Benchmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkClient interface {
	UnorderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	OrderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
}

type benchmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkClient(cc grpc.ClientConnInterface) BenchmarkClient {
	return &benchmarkClient{cc}
}

func (c *benchmarkClient) UnorderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/UnorderedQC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) OrderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/OrderedQC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkServer is the server API for Benchmark service.
type BenchmarkServer interface {
	UnorderedQC(context.Context, *Echo) (*Echo, error)
	OrderedQC(context.Context, *Echo) (*Echo, error)
}

// UnimplementedBenchmarkServer can be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServer struct {
}

func (*UnimplementedBenchmarkServer) UnorderedQC(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnorderedQC not implemented")
}
func (*UnimplementedBenchmarkServer) OrderedQC(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderedQC not implemented")
}

func RegisterBenchmarkServer(s *grpc.Server, srv BenchmarkServer) {
	s.RegisterService(&_Benchmark_serviceDesc, srv)
}

func _Benchmark_UnorderedQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).UnorderedQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/UnorderedQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).UnorderedQC(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_OrderedQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).OrderedQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/OrderedQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).OrderedQC(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Benchmark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "benchmark.Benchmark",
	HandlerType: (*BenchmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnorderedQC",
			Handler:    _Benchmark_UnorderedQC_Handler,
		},
		{
			MethodName: "OrderedQC",
			Handler:    _Benchmark_OrderedQC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "benchmark.proto",
}
