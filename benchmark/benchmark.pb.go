// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.30.2
// source: benchmark/benchmark.proto

package benchmark

import (
	_ "github.com/relab/gorums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Echo struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Payload []byte                 `protobuf:"bytes,1,opt,name=payload"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Echo) Reset() {
	*x = Echo{}
	mi := &file_benchmark_benchmark_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_benchmark_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Echo) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *Echo) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
}

type Echo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Payload []byte
}

func (b0 Echo_builder) Build() *Echo {
	m0 := &Echo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Payload = b.Payload
	return m0
}

type TimedMsg struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SendTime int64                  `protobuf:"varint,1,opt,name=SendTime"`
	xxx_hidden_Payload  []byte                 `protobuf:"bytes,2,opt,name=payload"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TimedMsg) Reset() {
	*x = TimedMsg{}
	mi := &file_benchmark_benchmark_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedMsg) ProtoMessage() {}

func (x *TimedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_benchmark_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimedMsg) GetSendTime() int64 {
	if x != nil {
		return x.xxx_hidden_SendTime
	}
	return 0
}

func (x *TimedMsg) GetPayload() []byte {
	if x != nil {
		return x.xxx_hidden_Payload
	}
	return nil
}

func (x *TimedMsg) SetSendTime(v int64) {
	x.xxx_hidden_SendTime = v
}

func (x *TimedMsg) SetPayload(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Payload = v
}

type TimedMsg_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SendTime int64
	Payload  []byte
}

func (b0 TimedMsg_builder) Build() *TimedMsg {
	m0 := &TimedMsg{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_SendTime = b.SendTime
	x.xxx_hidden_Payload = b.Payload
	return m0
}

type StartRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	mi := &file_benchmark_benchmark_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_benchmark_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StartRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StartRequest_builder) Build() *StartRequest {
	m0 := &StartRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type StartResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	mi := &file_benchmark_benchmark_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_benchmark_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StartResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StartResponse_builder) Build() *StartResponse {
	m0 := &StartResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type StopRequest struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	mi := &file_benchmark_benchmark_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_benchmark_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type StopRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 StopRequest_builder) Build() *StopRequest {
	m0 := &StopRequest{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type Result struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        string                 `protobuf:"bytes,1,opt,name=Name"`
	xxx_hidden_TotalOps    uint64                 `protobuf:"varint,2,opt,name=TotalOps"`
	xxx_hidden_TotalTime   int64                  `protobuf:"varint,3,opt,name=TotalTime"`
	xxx_hidden_Throughput  float64                `protobuf:"fixed64,4,opt,name=Throughput"`
	xxx_hidden_LatencyAvg  float64                `protobuf:"fixed64,5,opt,name=LatencyAvg"`
	xxx_hidden_LatencyVar  float64                `protobuf:"fixed64,6,opt,name=LatencyVar"`
	xxx_hidden_AllocsPerOp uint64                 `protobuf:"varint,7,opt,name=AllocsPerOp"`
	xxx_hidden_MemPerOp    uint64                 `protobuf:"varint,8,opt,name=MemPerOp"`
	xxx_hidden_ServerStats *[]*MemoryStat         `protobuf:"bytes,9,rep,name=ServerStats"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_benchmark_benchmark_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_benchmark_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Result) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *Result) GetTotalOps() uint64 {
	if x != nil {
		return x.xxx_hidden_TotalOps
	}
	return 0
}

func (x *Result) GetTotalTime() int64 {
	if x != nil {
		return x.xxx_hidden_TotalTime
	}
	return 0
}

func (x *Result) GetThroughput() float64 {
	if x != nil {
		return x.xxx_hidden_Throughput
	}
	return 0
}

func (x *Result) GetLatencyAvg() float64 {
	if x != nil {
		return x.xxx_hidden_LatencyAvg
	}
	return 0
}

func (x *Result) GetLatencyVar() float64 {
	if x != nil {
		return x.xxx_hidden_LatencyVar
	}
	return 0
}

func (x *Result) GetAllocsPerOp() uint64 {
	if x != nil {
		return x.xxx_hidden_AllocsPerOp
	}
	return 0
}

func (x *Result) GetMemPerOp() uint64 {
	if x != nil {
		return x.xxx_hidden_MemPerOp
	}
	return 0
}

func (x *Result) GetServerStats() []*MemoryStat {
	if x != nil {
		if x.xxx_hidden_ServerStats != nil {
			return *x.xxx_hidden_ServerStats
		}
	}
	return nil
}

func (x *Result) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *Result) SetTotalOps(v uint64) {
	x.xxx_hidden_TotalOps = v
}

func (x *Result) SetTotalTime(v int64) {
	x.xxx_hidden_TotalTime = v
}

func (x *Result) SetThroughput(v float64) {
	x.xxx_hidden_Throughput = v
}

func (x *Result) SetLatencyAvg(v float64) {
	x.xxx_hidden_LatencyAvg = v
}

func (x *Result) SetLatencyVar(v float64) {
	x.xxx_hidden_LatencyVar = v
}

func (x *Result) SetAllocsPerOp(v uint64) {
	x.xxx_hidden_AllocsPerOp = v
}

func (x *Result) SetMemPerOp(v uint64) {
	x.xxx_hidden_MemPerOp = v
}

func (x *Result) SetServerStats(v []*MemoryStat) {
	x.xxx_hidden_ServerStats = &v
}

type Result_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name        string
	TotalOps    uint64
	TotalTime   int64
	Throughput  float64
	LatencyAvg  float64
	LatencyVar  float64
	AllocsPerOp uint64
	MemPerOp    uint64
	ServerStats []*MemoryStat
}

func (b0 Result_builder) Build() *Result {
	m0 := &Result{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_TotalOps = b.TotalOps
	x.xxx_hidden_TotalTime = b.TotalTime
	x.xxx_hidden_Throughput = b.Throughput
	x.xxx_hidden_LatencyAvg = b.LatencyAvg
	x.xxx_hidden_LatencyVar = b.LatencyVar
	x.xxx_hidden_AllocsPerOp = b.AllocsPerOp
	x.xxx_hidden_MemPerOp = b.MemPerOp
	x.xxx_hidden_ServerStats = &b.ServerStats
	return m0
}

type MemoryStat struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Allocs uint64                 `protobuf:"varint,1,opt,name=Allocs"`
	xxx_hidden_Memory uint64                 `protobuf:"varint,2,opt,name=Memory"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MemoryStat) Reset() {
	*x = MemoryStat{}
	mi := &file_benchmark_benchmark_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStat) ProtoMessage() {}

func (x *MemoryStat) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_benchmark_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MemoryStat) GetAllocs() uint64 {
	if x != nil {
		return x.xxx_hidden_Allocs
	}
	return 0
}

func (x *MemoryStat) GetMemory() uint64 {
	if x != nil {
		return x.xxx_hidden_Memory
	}
	return 0
}

func (x *MemoryStat) SetAllocs(v uint64) {
	x.xxx_hidden_Allocs = v
}

func (x *MemoryStat) SetMemory(v uint64) {
	x.xxx_hidden_Memory = v
}

type MemoryStat_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Allocs uint64
	Memory uint64
}

func (b0 MemoryStat_builder) Build() *MemoryStat {
	m0 := &MemoryStat{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Allocs = b.Allocs
	x.xxx_hidden_Memory = b.Memory
	return m0
}

var File_benchmark_benchmark_proto protoreflect.FileDescriptor

var file_benchmark_benchmark_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x20, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x40, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x76, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x76, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x50, 0x65, 0x72, 0x4f, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x4f, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x4d, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x37, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x32, 0x9c, 0x04, 0x0a, 0x09, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x4f, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0xa0, 0xb5,
	0x18, 0x01, 0x12, 0x46, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x2e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x04, 0xa0, 0xb5, 0x18, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x04, 0xa0, 0xb5, 0x18, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x22, 0x04, 0xa0, 0xb5, 0x18, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x51,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x62, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x1a, 0x0f, 0x2e, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x22, 0x04, 0xa0, 0xb5, 0x18,
	0x01, 0x12, 0x39, 0x0a, 0x0f, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x45, 0x63, 0x68, 0x6f, 0x1a, 0x0f, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x22, 0x04, 0xa0, 0xb5, 0x18, 0x01, 0x12, 0x34, 0x0a, 0x0a,
	0x53, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x1a, 0x0f, 0x2e, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x22, 0x04, 0xa0, 0xb5,
	0x18, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0x98, 0xb5,
	0x18, 0x01, 0x42, 0x28, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x6c, 0x61, 0x62, 0x2f, 0x67, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x2f, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x92, 0x03, 0x02, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var file_benchmark_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_benchmark_benchmark_proto_goTypes = []any{
	(*Echo)(nil),          // 0: benchmark.Echo
	(*TimedMsg)(nil),      // 1: benchmark.TimedMsg
	(*StartRequest)(nil),  // 2: benchmark.StartRequest
	(*StartResponse)(nil), // 3: benchmark.StartResponse
	(*StopRequest)(nil),   // 4: benchmark.StopRequest
	(*Result)(nil),        // 5: benchmark.Result
	(*MemoryStat)(nil),    // 6: benchmark.MemoryStat
	(*emptypb.Empty)(nil), // 7: google.protobuf.Empty
}
var file_benchmark_benchmark_proto_depIdxs = []int32{
	6, // 0: benchmark.Result.ServerStats:type_name -> benchmark.MemoryStat
	2, // 1: benchmark.Benchmark.StartServerBenchmark:input_type -> benchmark.StartRequest
	4, // 2: benchmark.Benchmark.StopServerBenchmark:input_type -> benchmark.StopRequest
	2, // 3: benchmark.Benchmark.StartBenchmark:input_type -> benchmark.StartRequest
	4, // 4: benchmark.Benchmark.StopBenchmark:input_type -> benchmark.StopRequest
	0, // 5: benchmark.Benchmark.QuorumCall:input_type -> benchmark.Echo
	0, // 6: benchmark.Benchmark.AsyncQuorumCall:input_type -> benchmark.Echo
	0, // 7: benchmark.Benchmark.SlowServer:input_type -> benchmark.Echo
	1, // 8: benchmark.Benchmark.Multicast:input_type -> benchmark.TimedMsg
	3, // 9: benchmark.Benchmark.StartServerBenchmark:output_type -> benchmark.StartResponse
	5, // 10: benchmark.Benchmark.StopServerBenchmark:output_type -> benchmark.Result
	3, // 11: benchmark.Benchmark.StartBenchmark:output_type -> benchmark.StartResponse
	6, // 12: benchmark.Benchmark.StopBenchmark:output_type -> benchmark.MemoryStat
	0, // 13: benchmark.Benchmark.QuorumCall:output_type -> benchmark.Echo
	0, // 14: benchmark.Benchmark.AsyncQuorumCall:output_type -> benchmark.Echo
	0, // 15: benchmark.Benchmark.SlowServer:output_type -> benchmark.Echo
	7, // 16: benchmark.Benchmark.Multicast:output_type -> google.protobuf.Empty
	9, // [9:17] is the sub-list for method output_type
	1, // [1:9] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_benchmark_benchmark_proto_init() }
func file_benchmark_benchmark_proto_init() {
	if File_benchmark_benchmark_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_benchmark_benchmark_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_benchmark_benchmark_proto_goTypes,
		DependencyIndexes: file_benchmark_benchmark_proto_depIdxs,
		MessageInfos:      file_benchmark_benchmark_proto_msgTypes,
	}.Build()
	File_benchmark_benchmark_proto = out.File
	file_benchmark_benchmark_proto_rawDesc = nil
	file_benchmark_benchmark_proto_goTypes = nil
	file_benchmark_benchmark_proto_depIdxs = nil
}
