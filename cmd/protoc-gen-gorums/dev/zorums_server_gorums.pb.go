// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	sync "sync"
)

// ZorumsService is the server-side API for the ZorumsService Service
type ZorumsService interface {
	Multicast(context.Context, *Request)
	MulticastPerNodeArg(context.Context, *Request)
	Multicast2(context.Context, *Request)
	Multicast3(context.Context, *Request)
	Multicast4(context.Context, *empty.Empty)
	OrderingQC(context.Context, *Request, func(*Response, error))
	OrderingPerNodeArg(context.Context, *Request, func(*Response, error))
	OrderingCustomReturnType(context.Context, *Request, func(*Response, error))
	OrderingCombo(context.Context, *Request, func(*Response, error))
	OrderingUnaryRPC(context.Context, *Request, func(*Response, error))
	OrderingFuture(context.Context, *Request, func(*Response, error))
	OrderingFuturePerNodeArg(context.Context, *Request, func(*Response, error))
	OrderingFutureCustomReturnType(context.Context, *Request, func(*Response, error))
	OrderingFutureCombo(context.Context, *Request, func(*Response, error))
	Unicast(context.Context, *Request)
	Unicast2(context.Context, *Request)
}

func (s *GorumsServer) RegisterZorumsServiceServer(srv ZorumsService) {
	s.srv.handlers[multicastMethodID] = func(ctx context.Context, in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast(ctx, req)
	}
	s.srv.handlers[multicastPerNodeArgMethodID] = func(ctx context.Context, in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.MulticastPerNodeArg(ctx, req)
	}
	s.srv.handlers[multicast2MethodID] = func(ctx context.Context, in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast2(ctx, req)
	}
	s.srv.handlers[multicast3MethodID] = func(ctx context.Context, in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast3(ctx, req)
	}
	s.srv.handlers[multicast4MethodID] = func(ctx context.Context, in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*empty.Empty)
		srv.Multicast4(ctx, req)
	}
	s.srv.handlers[orderingQCMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingQC(ctx, req, f)
	}
	s.srv.handlers[orderingPerNodeArgMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingPerNodeArg(ctx, req, f)
	}
	s.srv.handlers[orderingCustomReturnTypeMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingCustomReturnType(ctx, req, f)
	}
	s.srv.handlers[orderingComboMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingCombo(ctx, req, f)
	}
	s.srv.handlers[orderingUnaryRPCMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingUnaryRPC(ctx, req, f)
	}
	s.srv.handlers[orderingFutureMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingFuture(ctx, req, f)
	}
	s.srv.handlers[orderingFuturePerNodeArgMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingFuturePerNodeArg(ctx, req, f)
	}
	s.srv.handlers[orderingFutureCustomReturnTypeMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingFutureCustomReturnType(ctx, req, f)
	}
	s.srv.handlers[orderingFutureComboMethodID] = func(ctx context.Context, in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		once := new(sync.Once)
		f := func(resp *Response, err error) {
			once.Do(func() {
				finished <- wrapMessage(in.metadata, resp, err)
			})
		}
		srv.OrderingFutureCombo(ctx, req, f)
	}
	s.srv.handlers[unicastMethodID] = func(ctx context.Context, in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Unicast(ctx, req)
	}
	s.srv.handlers[unicast2MethodID] = func(ctx context.Context, in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Unicast2(ctx, req)
	}
}
