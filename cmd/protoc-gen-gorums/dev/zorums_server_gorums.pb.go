// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	empty "github.com/golang/protobuf/ptypes/empty"
)

// ZorumsService is the server-side API for the ZorumsService Service
type ZorumsService interface {
	Multicast(*Request)
	MulticastPerNodeArg(*Request)
	Multicast2(*Request)
	Multicast3(*Request)
	Multicast4(*empty.Empty)
	MulticastConcurrent(*Request)
	OrderingQC(*Request) *Response
	OrderingPerNodeArg(*Request) *Response
	OrderingCustomReturnType(*Request) *Response
	OrderingCombo(*Request) *Response
	OrderingConcurrent(*Request) *Response
	OrderingUnaryRPC(*Request) *Response
	OrderingUnaryRPCConcurrent(*Request) *Response
	OrderingFuture(*Request) *Response
	OrderingFuturePerNodeArg(*Request) *Response
	OrderingFutureCustomReturnType(*Request) *Response
	OrderingFutureConcurrent(*Request) *Response
	OrderingFutureCombo(*Request) *Response
	Unicast(*Request)
	Unicast2(*Request)
	UnicastConcurrent(*Request)
}

func (s *GorumsServer) RegisterZorumsServiceServer(srv ZorumsService) {
	s.srv.handlers[multicastMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast(req)
	}
	s.srv.handlers[multicastPerNodeArgMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.MulticastPerNodeArg(req)
	}
	s.srv.handlers[multicast2MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast2(req)
	}
	s.srv.handlers[multicast3MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast3(req)
	}
	s.srv.handlers[multicast4MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*empty.Empty)
		srv.Multicast4(req)
	}
	s.srv.handlers[multicastConcurrentMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.MulticastConcurrent(req)
	}
	s.srv.handlers[orderingQCMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingQC(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingPerNodeArgMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingPerNodeArg(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingCustomReturnTypeMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingCustomReturnType(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingComboMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingCombo(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingConcurrentMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingConcurrent(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingUnaryRPCMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingUnaryRPC(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingUnaryRPCConcurrentMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingUnaryRPCConcurrent(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingFutureMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingFuture(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingFuturePerNodeArgMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingFuturePerNodeArg(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingFutureCustomReturnTypeMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingFutureCustomReturnType(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingFutureConcurrentMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingFutureConcurrent(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[orderingFutureComboMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		resp := srv.OrderingFutureCombo(req)
		finished <- &gorumsMessage{metadata: in.metadata, message: resp}
	}
	s.srv.handlers[unicastMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Unicast(req)
	}
	s.srv.handlers[unicast2MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Unicast2(req)
	}
	s.srv.handlers[unicastConcurrentMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.UnicastConcurrent(req)
	}
}
