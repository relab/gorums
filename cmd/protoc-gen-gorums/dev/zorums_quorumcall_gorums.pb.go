// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+71bed4a8
// 	protoc            v6.30.2
// source: zorums.proto

package dev

import (
	context "context"
	gorums "github.com/relab/gorums"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

// QuorumCall plain.
func (c *Configuration) QuorumCall(ctx context.Context, in *Request) gorums.Iterator[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCall",
		ServerStream: false,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// QuorumCall with per_node_arg option.
func (c *Configuration) QuorumCallPerNodeArg(ctx context.Context, in *Request, f func(*Request, uint32) *Request) gorums.Iterator[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCallPerNodeArg",
		ServerStream: false,
	}
	cd.PerNodeArgFn = func(req proto.Message, nid uint32) proto.Message {
		return f(req.(*Request), nid)
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// QuorumCallEmpty for testing imported message type.
func (c *Configuration) QuorumCallEmpty(ctx context.Context, in *emptypb.Empty) gorums.Iterator[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCallEmpty",
		ServerStream: false,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// QuorumCallEmpty2 for testing imported message type.
func (c *Configuration) QuorumCallEmpty2(ctx context.Context, in *Request) gorums.Iterator[*emptypb.Empty] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCallEmpty2",
		ServerStream: false,
	}

	return gorums.QuorumCall[*emptypb.Empty](ctx, c.RawConfiguration, cd)
}

// QuorumCall plain.
func (c *Configuration) QuorumCallStream(ctx context.Context, in *Request) gorums.Iterator[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCallStream",
		ServerStream: true,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// QuorumCall with per_node_arg option.
func (c *Configuration) QuorumCallStreamPerNodeArg(ctx context.Context, in *Request, f func(*Request, uint32) *Request) gorums.Iterator[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCallStreamPerNodeArg",
		ServerStream: true,
	}
	cd.PerNodeArgFn = func(req proto.Message, nid uint32) proto.Message {
		return f(req.(*Request), nid)
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// QuorumCallEmpty for testing imported message type.
func (c *Configuration) QuorumCallStreamEmpty(ctx context.Context, in *emptypb.Empty) gorums.Iterator[*Response] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCallStreamEmpty",
		ServerStream: true,
	}

	return gorums.QuorumCall[*Response](ctx, c.RawConfiguration, cd)
}

// QuorumCallEmpty2 for testing imported message type.
func (c *Configuration) QuorumCallStreamEmpty2(ctx context.Context, in *Request) gorums.Iterator[*emptypb.Empty] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "dev.ZorumsService.QuorumCallStreamEmpty2",
		ServerStream: true,
	}

	return gorums.QuorumCall[*emptypb.Empty](ctx, c.RawConfiguration, cd)
}
