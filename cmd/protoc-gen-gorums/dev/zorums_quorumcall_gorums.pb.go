// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.7.0-devel
// 	protoc            v6.30.2
// source: zorums.proto

package dev

import (
	context "context"
	gorums "github.com/relab/gorums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(7 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 7)
)

// QuorumCall plain.
func (c *Configuration[idType]) QuorumCall(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.QuorumCallData[idType]{
		Message: in,
		Method:  "dev.ZorumsService.QuorumCall",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[idType]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[idType]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		return c.qspec.QuorumCallQF(req.(*Request), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// QuorumCall with per_node_arg option.
func (c *Configuration[idType]) QuorumCallPerNodeArg(ctx context.Context, in *Request, f func(*Request, idType) *Request) (resp *Response, err error) {
	cd := gorums.QuorumCallData[idType]{
		Message: in,
		Method:  "dev.ZorumsService.QuorumCallPerNodeArg",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[idType]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[idType]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		return c.qspec.QuorumCallPerNodeArgQF(req.(*Request), r)
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid idType) protoreflect.ProtoMessage {
		return f(req.(*Request), nid)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// QuorumCall with custom_return_type option.
func (c *Configuration[idType]) QuorumCallCustomReturnType(ctx context.Context, in *Request) (resp *MyResponse, err error) {
	cd := gorums.QuorumCallData[idType]{
		Message: in,
		Method:  "dev.ZorumsService.QuorumCallCustomReturnType",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[idType]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[idType]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		return c.qspec.QuorumCallCustomReturnTypeQF(req.(*Request), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*MyResponse), err
}

// QuorumCallCombo with all supported options.
func (c *Configuration[idType]) QuorumCallCombo(ctx context.Context, in *Request, f func(*Request, idType) *Request) (resp *MyResponse, err error) {
	cd := gorums.QuorumCallData[idType]{
		Message: in,
		Method:  "dev.ZorumsService.QuorumCallCombo",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[idType]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[idType]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		return c.qspec.QuorumCallComboQF(req.(*Request), r)
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid idType) protoreflect.ProtoMessage {
		return f(req.(*Request), nid)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*MyResponse), err
}

// QuorumCallEmpty for testing imported message type.
func (c *Configuration[idType]) QuorumCallEmpty(ctx context.Context, in *emptypb.Empty) (resp *Response, err error) {
	cd := gorums.QuorumCallData[idType]{
		Message: in,
		Method:  "dev.ZorumsService.QuorumCallEmpty",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[idType]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[idType]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		return c.qspec.QuorumCallEmptyQF(req.(*emptypb.Empty), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// QuorumCallEmpty2 for testing imported message type.
func (c *Configuration[idType]) QuorumCallEmpty2(ctx context.Context, in *Request) (resp *emptypb.Empty, err error) {
	cd := gorums.QuorumCallData[idType]{
		Message: in,
		Method:  "dev.ZorumsService.QuorumCallEmpty2",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[idType]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[idType]*emptypb.Empty, len(replies))
		for k, v := range replies {
			r[k] = v.(*emptypb.Empty)
		}
		return c.qspec.QuorumCallEmpty2QF(req.(*Request), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*emptypb.Empty), err
}
