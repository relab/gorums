// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+d97bfa83
// 	protoc            v6.30.2
// source: zorums.proto

package dev

import (
	context "context"
	gorums "github.com/relab/gorums"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

// Multicast plain. Response type is not needed here.
func (c *ZorumsServiceConfiguration) Multicast(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsService.Multicast",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// MulticastPerNodeArg with per_node_arg option.
func (c *ZorumsServiceConfiguration) MulticastPerNodeArg(ctx context.Context, in *Request, f func(*Request, uint32) *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsService.MulticastPerNodeArg",
	}

	cd.PerNodeArgFn = func(req proto.Message, nid uint32) proto.Message {
		return f(req.(*Request), nid)
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// Multicast2 is testing whether multiple streams work.
func (c *ZorumsServiceConfiguration) Multicast2(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsService.Multicast2",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Multicast3 is testing imported message type.
func (c *ZorumsServiceConfiguration) Multicast3(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsService.Multicast3",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Multicast4 is testing imported message type.
func (c *ZorumsServiceConfiguration) Multicast4(ctx context.Context, in *emptypb.Empty, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsService.Multicast4",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// Multicast plain. Response type is not needed here.
func (c *ZorumsNoQCServiceConfiguration) Multicast(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsNoQCService.Multicast",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// MulticastPerNodeArg with per_node_arg option.
func (c *ZorumsNoQCServiceConfiguration) MulticastPerNodeArg(ctx context.Context, in *Request, f func(*Request, uint32) *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsNoQCService.MulticastPerNodeArg",
	}

	cd.PerNodeArgFn = func(req proto.Message, nid uint32) proto.Message {
		return f(req.(*Request), nid)
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// Multicast2 is testing whether multiple streams work.
func (c *ZorumsNoQCServiceConfiguration) Multicast2(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsNoQCService.Multicast2",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Multicast3 is testing imported message type.
func (c *ZorumsNoQCServiceConfiguration) Multicast3(ctx context.Context, in *Request, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsNoQCService.Multicast3",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// Multicast4 is testing imported message type.
func (c *ZorumsNoQCServiceConfiguration) Multicast4(ctx context.Context, in *emptypb.Empty, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "dev.ZorumsNoQCService.Multicast4",
	}

	c.RawConfiguration.Multicast(ctx, cd, opts...)
}
