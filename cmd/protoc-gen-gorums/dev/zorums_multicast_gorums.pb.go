// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	fmt "fmt"
	empty "github.com/golang/protobuf/ptypes/empty"
	ordering "github.com/relab/gorums/ordering"
	proto "google.golang.org/protobuf/proto"
)

// Multicast plain. Response type is not needed here.
func (c *Configuration) Multicast(in *Request) error {
	msgID := c.mgr.nextMsgID()
	data, err := proto.MarshalOptions{AllowPartial: true, Deterministic: true}.Marshal(in)
	if err != nil {
		return fmt.Errorf("failed to marshal message: %w", err)
	}
	msg := &ordering.Message{
		ID:       msgID,
		MethodID: multicastMethodID,
		Data:     data,
	}
	for _, n := range c.nodes {
		n.sendQ <- msg
	}
	return nil
}

// MulticastPerNodeArg with per_node_arg option.
// TODO(meling) currently this is not supported, but compiles as if
// per_node_arg wasn't specified. Need to implement support.
func (c *Configuration) MulticastPerNodeArg(in *Request, f func(*Request, uint32) *Request) error {
	msgID := c.mgr.nextMsgID()
	for _, n := range c.nodes {
		nodeArg := f(in, n.ID())
		if nodeArg == nil {
			continue
		}
		data, err := proto.MarshalOptions{AllowPartial: true, Deterministic: true}.Marshal(nodeArg)
		if err != nil {
			return fmt.Errorf("failed to marshal message: %w", err)
		}
		msg := &ordering.Message{
			ID:       msgID,
			MethodID: multicastPerNodeArgMethodID,
			Data:     data,
		}
		n.sendQ <- msg
	}
	return nil
}

// Multicast2 is testing whether multiple streams work.
func (c *Configuration) Multicast2(in *Request) error {
	msgID := c.mgr.nextMsgID()
	data, err := proto.MarshalOptions{AllowPartial: true, Deterministic: true}.Marshal(in)
	if err != nil {
		return fmt.Errorf("failed to marshal message: %w", err)
	}
	msg := &ordering.Message{
		ID:       msgID,
		MethodID: multicast2MethodID,
		Data:     data,
	}
	for _, n := range c.nodes {
		n.sendQ <- msg
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ empty.Empty

// Multicast3 is testing imported message type.
func (c *Configuration) Multicast3(in *Request) error {
	msgID := c.mgr.nextMsgID()
	data, err := proto.MarshalOptions{AllowPartial: true, Deterministic: true}.Marshal(in)
	if err != nil {
		return fmt.Errorf("failed to marshal message: %w", err)
	}
	msg := &ordering.Message{
		ID:       msgID,
		MethodID: multicast3MethodID,
		Data:     data,
	}
	for _, n := range c.nodes {
		n.sendQ <- msg
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ empty.Empty

// Multicast4 is testing imported message type.
func (c *Configuration) Multicast4(in *empty.Empty) error {
	msgID := c.mgr.nextMsgID()
	data, err := proto.MarshalOptions{AllowPartial: true, Deterministic: true}.Marshal(in)
	if err != nil {
		return fmt.Errorf("failed to marshal message: %w", err)
	}
	msg := &ordering.Message{
		ID:       msgID,
		MethodID: multicast4MethodID,
		Data:     data,
	}
	for _, n := range c.nodes {
		n.sendQ <- msg
	}
	return nil
}
