syntax = "proto3";

package dev;

option go_package = "cmd/protoc-gen-gorums/dev";

import "gorums.proto";
import "google/protobuf/empty.proto";

message Request { string Value = 1; }
message Response { int64 Result = 1; }
message MyResponse { string Value = 1; }

// ZorumsService is not meant to be implemented.
// The zorums generated code is placed alongside Gorums static code files
// (without the zorums prefix) because they depend on the generated code.
// The generated code must pass compilation, but no further tests are performed.
// Other tests are provided to test the actual generated code.
// The RPCs in this service aims to test various uses of Gorums's
// options and call types, including imported message types and
// multiple RPCs reusing the same input and output types.
service ZorumsService {

  // GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
  // they are added to the _grpc.pb.go generated file.
  rpc GRPCCall(Request) returns (Response) {}

  // ---------------------------------------------------------------
  // QuorumCall variants
  // ---------------------------------------------------------------

  // QuorumCall plain.
  rpc QuorumCall(Request) returns (Response) {
    option (gorums.quorumcall) = true;
  }
  // QuorumCall with per_node_arg option.
  rpc QuorumCallPerNodeArg(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.per_node_arg) = true;
  }
  // QuorumCall with custom_return_type option.
  rpc QuorumCallCustomReturnType(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // QuorumCallCombo with all supported options.
  rpc QuorumCallCombo(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // QuorumCallEmpty for testing imported message type.
  rpc QuorumCallEmpty(google.protobuf.Empty) returns (Response) {
    option (gorums.quorumcall) = true;
  }
  // QuorumCallEmpty2 for testing imported message type.
  rpc QuorumCallEmpty2(Request) returns (google.protobuf.Empty) {
    option (gorums.quorumcall) = true;
  }

  // ------------------------------------------------------------------
  // Multicast variants
  // The multicast call type does not support the 'custom_return_type'
  // option since multicast is one-way and so it doesn't make sense to
  // operate on response types.
  // ------------------------------------------------------------------

  // Multicast plain. Response type is not needed here.
  rpc Multicast(Request) returns (Response) {
    option (gorums.multicast) = true;
  }
  // MulticastPerNodeArg with per_node_arg option.
  // TODO(meling) currently this is not supported, but compiles as if
  // per_node_arg wasn't specified. Need to implement support.
  rpc MulticastPerNodeArg(Request) returns (Response) {
    option (gorums.multicast) = true;
    option (gorums.per_node_arg) = true;
  }
  // Multicast2 is testing whether multiple streams work.
  rpc Multicast2(Request) returns (Response) {
    option (gorums.multicast) = true;
  }
  // Multicast3 is testing imported message type.
  rpc Multicast3(Request) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }
  // Multicast4 is testing imported message type.
  rpc Multicast4(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }
  // MutlicastConcurrent uses a concurrent server-side handler
  rpc MulticastConcurrent(Request) returns (Response) {
    option (gorums.multicast) = true;
    option (gorums.concurrent) = true;
  }

  // ---------------------------------------------------------------
  // Future variants
  // ---------------------------------------------------------------

  // QuorumCallFuture plain.
  rpc QuorumCallFuture(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
  }
  // QuorumCallFuturePerNodeArg with per_node_arg option.
  rpc QuorumCallFuturePerNodeArg(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.per_node_arg) = true;
  }
  // QuorumCallFutureCustomReturnType with custom_return_type option.
  rpc QuorumCallFutureCustomReturnType(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // QuorumCallFutureCombo with all supported options.
  rpc QuorumCallFutureCombo(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // QuorumCallFuture2 plain; with same return type: Response.
  rpc QuorumCallFuture2(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
  }
  // QuorumCallFutureEmpty for testing imported message type.
  rpc QuorumCallFutureEmpty(Request) returns (google.protobuf.Empty) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
  }
  // QuorumCallFutureEmpty2 for testing imported message type; with same return
  // type as QuorumCallFuture: Response.
  rpc QuorumCallFutureEmpty2(google.protobuf.Empty) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
  }

  // ---------------------------------------------------------------
  // Correctable variants
  // ---------------------------------------------------------------

  // Correctable plain.
  rpc Correctable(Request) returns (Response) {
    option (gorums.correctable) = true;
  }
  // CorrectablePerNodeArg with per_node_arg option.
  rpc CorrectablePerNodeArg(Request) returns (Response) {
    option (gorums.correctable) = true;
    option (gorums.per_node_arg) = true;
  }
  // CorrectableCustomReturnType with custom_return_type option.
  rpc CorrectableCustomReturnType(Request) returns (Response) {
    option (gorums.correctable) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // CorrectableCombo with all supported options.
  rpc CorrectableCombo(Request) returns (Response) {
    option (gorums.correctable) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // CorrectableEmpty for testing imported message type.
  rpc CorrectableEmpty(Request) returns (google.protobuf.Empty) {
    option (gorums.correctable) = true;
  }
  // CorrectableEmpty2 for testing imported message type; with same return
  // type as Correctable: Response.
  rpc CorrectableEmpty2(google.protobuf.Empty) returns (Response) {
    option (gorums.correctable) = true;
  }

  // ---------------------------------------------------------------
  // CorrectableStream variants
  // ---------------------------------------------------------------

  // CorrectableStream plain.
  rpc CorrectableStream(Request) returns (stream Response) {
    option (gorums.correctable) = true;
  }
  // CorrectablePerNodeArg with per_node_arg option.
  rpc CorrectableStreamPerNodeArg(Request) returns (stream Response) {
    option (gorums.correctable) = true;
    option (gorums.per_node_arg) = true;
  }
  // CorrectableCustomReturnType with custom_return_type option.
  rpc CorrectableStreamCustomReturnType(Request) returns (stream Response) {
    option (gorums.correctable) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // CorrectableCombo with all supported options.
  rpc CorrectableStreamCombo(Request) returns (stream Response) {
    option (gorums.correctable) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  // CorrectableEmpty for testing imported message type.
  rpc CorrectableStreamEmpty(Request) returns (stream google.protobuf.Empty) {
    option (gorums.correctable) = true;
  }
  // CorrectableEmpty2 for testing imported message type; with same return
  // type as Correctable: Response.
  rpc CorrectableStreamEmpty2(google.protobuf.Empty) returns (stream Response) {
    option (gorums.correctable) = true;
  }

  // ---------------------------------------------------------------
  // Ordered QuorumCall variants
  // ---------------------------------------------------------------

  rpc OrderingQC(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
  }
  rpc OrderingPerNodeArg(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
    option (gorums.per_node_arg) = true;
  }
  rpc OrderingCustomReturnType(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  rpc OrderingCombo(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  rpc OrderingConcurrent(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.ordered) = true;
    option (gorums.concurrent) = true;
  }

  // OrderingUnaryRPC is testing that we can create ordered Unary RPCs
  rpc OrderingUnaryRPC(Request) returns (Response) {
    option (gorums.ordered) = true;
  }
  // OrderingUnaryRPC is testing that we can create ordered Unary RPCs with
  // concurrent handlers
  rpc OrderingUnaryRPCConcurrent(Request) returns (Response) {
    option (gorums.ordered) = true;
    option (gorums.concurrent) = true;
  }

  // ---------------------------------------------------------------
  // Ordered Future variants
  // ---------------------------------------------------------------

  rpc OrderingFuture(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.ordered) = true;
  }
  rpc OrderingFuturePerNodeArg(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.ordered) = true;
    option (gorums.per_node_arg) = true;
  }
  rpc OrderingFutureCustomReturnType(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.ordered) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }
  rpc OrderingFutureConcurrent(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.ordered) = true;
    option (gorums.concurrent) = true;
  }
  rpc OrderingFutureCombo(Request) returns (Response) {
    option (gorums.quorumcall) = true;
    option (gorums.async) = true;
    option (gorums.ordered) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyResponse";
  }

  // ---------------------------------------------------------------
  // Unicast
  // ---------------------------------------------------------------

  rpc Unicast(Request) returns (Response) { option (gorums.unicast) = true; }

  rpc Unicast2(Request) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc UnicastConcurrent(Request) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
    option (gorums.concurrent) = true;
  }
}
