syntax = "proto3";

package dev;

option go_package = "cmd/protoc-gen-gorums/dev";

import "gorums.proto";

message ReadRequest { string Value = 1; }
message ReadResponse { int64 Result = 1; }
message MyReadResponse {
  string Value = 1;
  int64 Result = 2;
}

service ReaderService {
  rpc ReadGrpc(ReadRequest) returns (ReadResponse) {}
  rpc ReadQuorumCall(ReadRequest) returns (ReadResponse) {
    option (gorums.qc) = true;
  }
  rpc ReadQuorumCallPerNodeArg(ReadRequest) returns (ReadResponse) {
    option (gorums.qc) = true;
    option (gorums.per_node_arg) = true;
  }
  rpc ReadQuorumCallQFWithRequestArg(ReadRequest) returns (ReadResponse) {
    option (gorums.qc) = true;
    option (gorums.qf_with_req) = true;
  }
  rpc ReadQuorumCallCustomReturnType(ReadRequest) returns (ReadResponse) {
    option (gorums.qc) = true;
    option (gorums.custom_return_type) = "MyReadResponse";
  }
  // ReadQuorumCallCombo does it all. Comment testing.
  rpc ReadQuorumCallCombo(ReadRequest) returns (ReadResponse) {
    option (gorums.qc) = true;
    option (gorums.qf_with_req) = true;
    option (gorums.per_node_arg) = true;
    option (gorums.custom_return_type) = "MyReadResponse";
  }
  // ReadMulticast is testing a comment.
  rpc ReadMulticast(stream ReadRequest) returns (ReadResponse) {
    option (gorums.multicast) = true;
  }
  // ReadMulticast2 is testing whether multiple streams work.
  rpc ReadMulticast2(stream ReadRequest) returns (ReadResponse) {
    option (gorums.multicast) = true;
  }
  rpc ReadQuorumCallFuture(ReadRequest) returns (ReadResponse) {
    option (gorums.qc_future) = true;
  }
  rpc ReadCorrectable(ReadRequest) returns (ReadResponse) {
    option (gorums.correctable) = true;
    option (gorums.custom_return_type) = "MyReadResponse";
  }
  rpc ReadCorrectableStream(ReadRequest) returns (stream ReadResponse) {
    option (gorums.correctable_stream) = true;
  }
}
