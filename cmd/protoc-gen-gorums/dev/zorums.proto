edition = "2023";

package dev;

option go_package = "cmd/protoc-gen-gorums/dev";

option features.field_presence = IMPLICIT;

import "gorums.proto";
import "google/protobuf/empty.proto";

message Request {
    string Value = 1;
}
message Response {
    int64 Result = 1;
}
message MyResponse {
    string Value = 1;
}

// ZorumsService is not meant to be implemented.
// The zorums generated code is placed alongside Gorums static code files
// (without the zorums prefix) because they depend on the generated code.
// The generated code must pass compilation, but no further tests are performed.
// Other tests are provided to test the actual generated code.
// The RPCs in this service aims to test various uses of Gorums's
// options and call types, including imported message types and
// multiple RPCs reusing the same input and output types.
service ZorumsService {
    // GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
    // they are added to the _grpc.pb.go generated file.
    rpc GRPCCall(Request) returns (Response) {}

    // ---------------------------------------------------------------
    // QuorumCall variants
    // ---------------------------------------------------------------

    // QuorumCall plain.
    rpc QuorumCall(Request) returns (Response) {
        option (gorums.quorumcall) = true;
    }
    // QuorumCall with per_node_arg option.
    rpc QuorumCallPerNodeArg(Request) returns (Response) {
        option (gorums.quorumcall)   = true;
        option (gorums.per_node_arg) = true;
    }
    // QuorumCallEmpty for testing imported message type.
    rpc QuorumCallEmpty(google.protobuf.Empty) returns (Response) {
        option (gorums.quorumcall) = true;
    }
    // QuorumCallEmpty2 for testing imported message type.
    rpc QuorumCallEmpty2(Request) returns (google.protobuf.Empty) {
        option (gorums.quorumcall) = true;
    }

    // ---------------------------------------------------------------
    // QuorumCall stream variants
    // ---------------------------------------------------------------

    // QuorumCall plain.
    rpc QuorumCallStream(Request) returns (stream Response) {
        option (gorums.quorumcall) = true;
    }
    // QuorumCall with per_node_arg option.
    rpc QuorumCallStreamPerNodeArg(Request) returns (stream Response) {
        option (gorums.quorumcall)   = true;
        option (gorums.per_node_arg) = true;
    }
    // QuorumCallEmpty for testing imported message type.
    rpc QuorumCallStreamEmpty(google.protobuf.Empty) returns (stream Response) {
        option (gorums.quorumcall) = true;
    }
    // QuorumCallEmpty2 for testing imported message type.
    rpc QuorumCallStreamEmpty2(Request) returns (stream google.protobuf.Empty) {
        option (gorums.quorumcall) = true;
    }

    // ------------------------------------------------------------------
    // Multicast variants
    // The multicast call type does not support the 'custom_return_type'
    // option since multicast is one-way and so it doesn't make sense to
    // operate on response types.
    // ------------------------------------------------------------------

    // Multicast plain. Response type is not needed here.
    rpc Multicast(Request) returns (Response) {
        option (gorums.multicast) = true;
    }
    // MulticastPerNodeArg with per_node_arg option.
    rpc MulticastPerNodeArg(Request) returns (Response) {
        option (gorums.multicast)    = true;
        option (gorums.per_node_arg) = true;
    }
    // Multicast2 is testing whether multiple streams work.
    rpc Multicast2(Request) returns (Response) {
        option (gorums.multicast) = true;
    }
    // Multicast3 is testing imported message type.
    rpc Multicast3(Request) returns (google.protobuf.Empty) {
        option (gorums.multicast) = true;
    }
    // Multicast4 is testing imported message type.
    rpc Multicast4(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (gorums.multicast) = true;
    }

    // ---------------------------------------------------------------
    // Unicast
    // ---------------------------------------------------------------

    rpc Unicast(Request) returns (Response) {
        option (gorums.unicast) = true;
    }

    rpc Unicast2(Request) returns (google.protobuf.Empty) {
        option (gorums.unicast) = true;
    }
}

service ZorumsNoQCService {
    // GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
    // they are added to the _grpc.pb.go generated file.
    rpc GRPCCall(Request) returns (Response) {}

    // ------------------------------------------------------------------
    // Multicast variants
    // The multicast call type does not support the 'custom_return_type'
    // option since multicast is one-way and so it doesn't make sense to
    // operate on response types.
    // ------------------------------------------------------------------

    // Multicast plain. Response type is not needed here.
    rpc Multicast(Request) returns (Response) {
        option (gorums.multicast) = true;
    }
    // MulticastPerNodeArg with per_node_arg option.
    rpc MulticastPerNodeArg(Request) returns (Response) {
        option (gorums.multicast)    = true;
        option (gorums.per_node_arg) = true;
    }
    // Multicast2 is testing whether multiple streams work.
    rpc Multicast2(Request) returns (Response) {
        option (gorums.multicast) = true;
    }
    // Multicast3 is testing imported message type.
    rpc Multicast3(Request) returns (google.protobuf.Empty) {
        option (gorums.multicast) = true;
    }
    // Multicast4 is testing imported message type.
    rpc Multicast4(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (gorums.multicast) = true;
    }

    // ---------------------------------------------------------------
    // Unicast
    // ---------------------------------------------------------------

    rpc Unicast(Request) returns (Response) {
        option (gorums.unicast) = true;
    }

    rpc Unicast2(Request) returns (google.protobuf.Empty) {
        option (gorums.unicast) = true;
    }
}
