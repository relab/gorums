// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dev

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZorumsServiceClient is the client API for ZorumsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZorumsServiceClient interface {
	// GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
	// they are added to the _grpc.pb.go generated file.
	GRPCCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall plain.
	QuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall with per_node_arg option.
	QuorumCallPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall with custom_return_type option.
	QuorumCallCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallCombo with all supported options.
	QuorumCallCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallEmpty for testing imported message type.
	QuorumCallEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallEmpty2 for testing imported message type.
	QuorumCallEmpty2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Multicast plain. Response type is not needed here.
	Multicast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// MulticastPerNodeArg with per_node_arg option.
	// TODO(meling) currently this is not supported, but compiles as if
	// per_node_arg wasn't specified. Need to implement support.
	MulticastPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Multicast2 is testing whether multiple streams work.
	Multicast2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Multicast3 is testing imported message type.
	Multicast3(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Multicast4 is testing imported message type.
	Multicast4(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// MutlicastConcurrent uses a concurrent server-side handler
	MulticastConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFuture plain.
	QuorumCallFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFuturePerNodeArg with per_node_arg option.
	QuorumCallFuturePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFutureCustomReturnType with custom_return_type option.
	QuorumCallFutureCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFutureCombo with all supported options.
	QuorumCallFutureCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFuture2 plain; with same return type: Response.
	QuorumCallFuture2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCallFutureEmpty for testing imported message type.
	QuorumCallFutureEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// QuorumCallFutureEmpty2 for testing imported message type; with same return
	// type as QuorumCallFuture: Response.
	QuorumCallFutureEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	// Correctable plain.
	Correctable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// CorrectablePerNodeArg with per_node_arg option.
	CorrectablePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// CorrectableCustomReturnType with custom_return_type option.
	CorrectableCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// CorrectableCombo with all supported options.
	CorrectableCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// CorrectableEmpty for testing imported message type.
	CorrectableEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// CorrectableEmpty2 for testing imported message type; with same return
	// type as Correctable: Response.
	CorrectableEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	// CorrectableStream plain.
	CorrectableStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamClient, error)
	// CorrectablePerNodeArg with per_node_arg option.
	CorrectableStreamPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamPerNodeArgClient, error)
	// CorrectableCustomReturnType with custom_return_type option.
	CorrectableStreamCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamCustomReturnTypeClient, error)
	// CorrectableCombo with all supported options.
	CorrectableStreamCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamComboClient, error)
	// CorrectableEmpty for testing imported message type.
	CorrectableStreamEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamEmptyClient, error)
	// CorrectableEmpty2 for testing imported message type; with same return
	// type as Correctable: Response.
	CorrectableStreamEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamEmpty2Client, error)
	OrderingQC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// OrderingUnaryRPC is testing that we can create ordered Unary RPCs
	OrderingUnaryRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// OrderingUnaryRPC is testing that we can create ordered Unary RPCs with
	// concurrent handlers
	OrderingUnaryRPCConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingFuturePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingFutureCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingFutureConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OrderingFutureCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Unicast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Unicast2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	UnicastConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
}

type zorumsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZorumsServiceClient(cc grpc.ClientConnInterface) ZorumsServiceClient {
	return &zorumsServiceClient{cc}
}

func (c *zorumsServiceClient) GRPCCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/GRPCCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallPerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallCustomReturnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallCombo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallEmpty2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallEmpty2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Multicast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Multicast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) MulticastPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/MulticastPerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Multicast2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Multicast2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Multicast3(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Multicast3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Multicast4(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Multicast4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) MulticastConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/MulticastConcurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFuture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFuturePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFuturePerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureCustomReturnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureCombo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFuture2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFuture2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) QuorumCallFutureEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/QuorumCallFutureEmpty2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Correctable(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Correctable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) CorrectablePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/CorrectablePerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) CorrectableCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/CorrectableCustomReturnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) CorrectableCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/CorrectableCombo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) CorrectableEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/CorrectableEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) CorrectableEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/CorrectableEmpty2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) CorrectableStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[0], "/dev.ZorumsService/CorrectableStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceCorrectableStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZorumsService_CorrectableStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceCorrectableStreamClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceCorrectableStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) CorrectableStreamPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamPerNodeArgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[1], "/dev.ZorumsService/CorrectableStreamPerNodeArg", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceCorrectableStreamPerNodeArgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZorumsService_CorrectableStreamPerNodeArgClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceCorrectableStreamPerNodeArgClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceCorrectableStreamPerNodeArgClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) CorrectableStreamCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamCustomReturnTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[2], "/dev.ZorumsService/CorrectableStreamCustomReturnType", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceCorrectableStreamCustomReturnTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZorumsService_CorrectableStreamCustomReturnTypeClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceCorrectableStreamCustomReturnTypeClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceCorrectableStreamCustomReturnTypeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) CorrectableStreamCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamComboClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[3], "/dev.ZorumsService/CorrectableStreamCombo", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceCorrectableStreamComboClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZorumsService_CorrectableStreamComboClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceCorrectableStreamComboClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceCorrectableStreamComboClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) CorrectableStreamEmpty(ctx context.Context, in *Request, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamEmptyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[4], "/dev.ZorumsService/CorrectableStreamEmpty", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceCorrectableStreamEmptyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZorumsService_CorrectableStreamEmptyClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type zorumsServiceCorrectableStreamEmptyClient struct {
	grpc.ClientStream
}

func (x *zorumsServiceCorrectableStreamEmptyClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) CorrectableStreamEmpty2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ZorumsService_CorrectableStreamEmpty2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ZorumsService_serviceDesc.Streams[5], "/dev.ZorumsService/CorrectableStreamEmpty2", opts...)
	if err != nil {
		return nil, err
	}
	x := &zorumsServiceCorrectableStreamEmpty2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZorumsService_CorrectableStreamEmpty2Client interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type zorumsServiceCorrectableStreamEmpty2Client struct {
	grpc.ClientStream
}

func (x *zorumsServiceCorrectableStreamEmpty2Client) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zorumsServiceClient) OrderingQC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingQC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingPerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingPerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingCustomReturnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingCombo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingConcurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingUnaryRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingUnaryRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingUnaryRPCConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingUnaryRPCConcurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingFuture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingFuturePerNodeArg(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingFuturePerNodeArg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingFutureCustomReturnType(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingFutureCustomReturnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingFutureConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingFutureConcurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) OrderingFutureCombo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/OrderingFutureCombo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Unicast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Unicast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) Unicast2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/Unicast2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zorumsServiceClient) UnicastConcurrent(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dev.ZorumsService/UnicastConcurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZorumsServiceServer is the server API for ZorumsService service.
type ZorumsServiceServer interface {
	// GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
	// they are added to the _grpc.pb.go generated file.
	GRPCCall(context.Context, *Request) (*Response, error)
	// QuorumCall plain.
	QuorumCall(context.Context, *Request) (*Response, error)
	// QuorumCall with per_node_arg option.
	QuorumCallPerNodeArg(context.Context, *Request) (*Response, error)
	// QuorumCall with custom_return_type option.
	QuorumCallCustomReturnType(context.Context, *Request) (*Response, error)
	// QuorumCallCombo with all supported options.
	QuorumCallCombo(context.Context, *Request) (*Response, error)
	// QuorumCallEmpty for testing imported message type.
	QuorumCallEmpty(context.Context, *empty.Empty) (*Response, error)
	// QuorumCallEmpty2 for testing imported message type.
	QuorumCallEmpty2(context.Context, *Request) (*empty.Empty, error)
	// Multicast plain. Response type is not needed here.
	Multicast(context.Context, *Request) (*Response, error)
	// MulticastPerNodeArg with per_node_arg option.
	// TODO(meling) currently this is not supported, but compiles as if
	// per_node_arg wasn't specified. Need to implement support.
	MulticastPerNodeArg(context.Context, *Request) (*Response, error)
	// Multicast2 is testing whether multiple streams work.
	Multicast2(context.Context, *Request) (*Response, error)
	// Multicast3 is testing imported message type.
	Multicast3(context.Context, *Request) (*empty.Empty, error)
	// Multicast4 is testing imported message type.
	Multicast4(context.Context, *empty.Empty) (*empty.Empty, error)
	// MutlicastConcurrent uses a concurrent server-side handler
	MulticastConcurrent(context.Context, *Request) (*Response, error)
	// QuorumCallFuture plain.
	QuorumCallFuture(context.Context, *Request) (*Response, error)
	// QuorumCallFuturePerNodeArg with per_node_arg option.
	QuorumCallFuturePerNodeArg(context.Context, *Request) (*Response, error)
	// QuorumCallFutureCustomReturnType with custom_return_type option.
	QuorumCallFutureCustomReturnType(context.Context, *Request) (*Response, error)
	// QuorumCallFutureCombo with all supported options.
	QuorumCallFutureCombo(context.Context, *Request) (*Response, error)
	// QuorumCallFuture2 plain; with same return type: Response.
	QuorumCallFuture2(context.Context, *Request) (*Response, error)
	// QuorumCallFutureEmpty for testing imported message type.
	QuorumCallFutureEmpty(context.Context, *Request) (*empty.Empty, error)
	// QuorumCallFutureEmpty2 for testing imported message type; with same return
	// type as QuorumCallFuture: Response.
	QuorumCallFutureEmpty2(context.Context, *empty.Empty) (*Response, error)
	// Correctable plain.
	Correctable(context.Context, *Request) (*Response, error)
	// CorrectablePerNodeArg with per_node_arg option.
	CorrectablePerNodeArg(context.Context, *Request) (*Response, error)
	// CorrectableCustomReturnType with custom_return_type option.
	CorrectableCustomReturnType(context.Context, *Request) (*Response, error)
	// CorrectableCombo with all supported options.
	CorrectableCombo(context.Context, *Request) (*Response, error)
	// CorrectableEmpty for testing imported message type.
	CorrectableEmpty(context.Context, *Request) (*empty.Empty, error)
	// CorrectableEmpty2 for testing imported message type; with same return
	// type as Correctable: Response.
	CorrectableEmpty2(context.Context, *empty.Empty) (*Response, error)
	// CorrectableStream plain.
	CorrectableStream(*Request, ZorumsService_CorrectableStreamServer) error
	// CorrectablePerNodeArg with per_node_arg option.
	CorrectableStreamPerNodeArg(*Request, ZorumsService_CorrectableStreamPerNodeArgServer) error
	// CorrectableCustomReturnType with custom_return_type option.
	CorrectableStreamCustomReturnType(*Request, ZorumsService_CorrectableStreamCustomReturnTypeServer) error
	// CorrectableCombo with all supported options.
	CorrectableStreamCombo(*Request, ZorumsService_CorrectableStreamComboServer) error
	// CorrectableEmpty for testing imported message type.
	CorrectableStreamEmpty(*Request, ZorumsService_CorrectableStreamEmptyServer) error
	// CorrectableEmpty2 for testing imported message type; with same return
	// type as Correctable: Response.
	CorrectableStreamEmpty2(*empty.Empty, ZorumsService_CorrectableStreamEmpty2Server) error
	OrderingQC(context.Context, *Request) (*Response, error)
	OrderingPerNodeArg(context.Context, *Request) (*Response, error)
	OrderingCustomReturnType(context.Context, *Request) (*Response, error)
	OrderingCombo(context.Context, *Request) (*Response, error)
	OrderingConcurrent(context.Context, *Request) (*Response, error)
	// OrderingUnaryRPC is testing that we can create ordered Unary RPCs
	OrderingUnaryRPC(context.Context, *Request) (*Response, error)
	// OrderingUnaryRPC is testing that we can create ordered Unary RPCs with
	// concurrent handlers
	OrderingUnaryRPCConcurrent(context.Context, *Request) (*Response, error)
	OrderingFuture(context.Context, *Request) (*Response, error)
	OrderingFuturePerNodeArg(context.Context, *Request) (*Response, error)
	OrderingFutureCustomReturnType(context.Context, *Request) (*Response, error)
	OrderingFutureConcurrent(context.Context, *Request) (*Response, error)
	OrderingFutureCombo(context.Context, *Request) (*Response, error)
	Unicast(context.Context, *Request) (*Response, error)
	Unicast2(context.Context, *Request) (*empty.Empty, error)
	UnicastConcurrent(context.Context, *Request) (*empty.Empty, error)
}

// UnimplementedZorumsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedZorumsServiceServer struct {
}

func (*UnimplementedZorumsServiceServer) GRPCCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCCall not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCall not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallPerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallPerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallCustomReturnType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallCombo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallEmpty(context.Context, *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallEmpty not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallEmpty2(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallEmpty2 not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multicast not implemented")
}
func (*UnimplementedZorumsServiceServer) MulticastPerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulticastPerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast2(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multicast2 not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast3(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multicast3 not implemented")
}
func (*UnimplementedZorumsServiceServer) Multicast4(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multicast4 not implemented")
}
func (*UnimplementedZorumsServiceServer) MulticastConcurrent(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulticastConcurrent not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFuture(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFuture not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFuturePerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFuturePerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureCustomReturnType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureCombo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFuture2(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFuture2 not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureEmpty(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureEmpty not implemented")
}
func (*UnimplementedZorumsServiceServer) QuorumCallFutureEmpty2(context.Context, *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFutureEmpty2 not implemented")
}
func (*UnimplementedZorumsServiceServer) Correctable(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Correctable not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectablePerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrectablePerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableCustomReturnType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrectableCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableCombo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrectableCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableEmpty(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrectableEmpty not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableEmpty2(context.Context, *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrectableEmpty2 not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableStream(*Request, ZorumsService_CorrectableStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CorrectableStream not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableStreamPerNodeArg(*Request, ZorumsService_CorrectableStreamPerNodeArgServer) error {
	return status.Errorf(codes.Unimplemented, "method CorrectableStreamPerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableStreamCustomReturnType(*Request, ZorumsService_CorrectableStreamCustomReturnTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method CorrectableStreamCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableStreamCombo(*Request, ZorumsService_CorrectableStreamComboServer) error {
	return status.Errorf(codes.Unimplemented, "method CorrectableStreamCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableStreamEmpty(*Request, ZorumsService_CorrectableStreamEmptyServer) error {
	return status.Errorf(codes.Unimplemented, "method CorrectableStreamEmpty not implemented")
}
func (*UnimplementedZorumsServiceServer) CorrectableStreamEmpty2(*empty.Empty, ZorumsService_CorrectableStreamEmpty2Server) error {
	return status.Errorf(codes.Unimplemented, "method CorrectableStreamEmpty2 not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingQC(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingQC not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingPerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingPerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingCustomReturnType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingCombo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingConcurrent(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingConcurrent not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingUnaryRPC(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingUnaryRPC not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingUnaryRPCConcurrent(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingUnaryRPCConcurrent not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingFuture(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingFuture not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingFuturePerNodeArg(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingFuturePerNodeArg not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingFutureCustomReturnType(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingFutureCustomReturnType not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingFutureConcurrent(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingFutureConcurrent not implemented")
}
func (*UnimplementedZorumsServiceServer) OrderingFutureCombo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingFutureCombo not implemented")
}
func (*UnimplementedZorumsServiceServer) Unicast(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unicast not implemented")
}
func (*UnimplementedZorumsServiceServer) Unicast2(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unicast2 not implemented")
}
func (*UnimplementedZorumsServiceServer) UnicastConcurrent(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnicastConcurrent not implemented")
}

func RegisterZorumsServiceServer(s *grpc.Server, srv ZorumsServiceServer) {
	s.RegisterService(&_ZorumsService_serviceDesc, srv)
}

func _ZorumsService_GRPCCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).GRPCCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/GRPCCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).GRPCCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallPerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallPerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallPerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallPerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallCustomReturnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallCustomReturnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallCustomReturnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallCustomReturnType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallCombo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallCombo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallCombo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallCombo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallEmpty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallEmpty2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallEmpty2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallEmpty2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallEmpty2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Multicast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Multicast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Multicast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Multicast(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_MulticastPerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).MulticastPerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/MulticastPerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).MulticastPerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Multicast2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Multicast2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Multicast2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Multicast2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Multicast3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Multicast3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Multicast3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Multicast3(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Multicast4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Multicast4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Multicast4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Multicast4(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_MulticastConcurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).MulticastConcurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/MulticastConcurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).MulticastConcurrent(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFuture(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFuturePerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFuturePerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFuturePerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFuturePerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureCustomReturnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureCustomReturnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureCustomReturnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureCustomReturnType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureCombo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureCombo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureCombo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureCombo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFuture2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFuture2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFuture2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFuture2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_QuorumCallFutureEmpty2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/QuorumCallFutureEmpty2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).QuorumCallFutureEmpty2(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Correctable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Correctable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Correctable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Correctable(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_CorrectablePerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).CorrectablePerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/CorrectablePerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).CorrectablePerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_CorrectableCustomReturnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).CorrectableCustomReturnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/CorrectableCustomReturnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).CorrectableCustomReturnType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_CorrectableCombo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).CorrectableCombo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/CorrectableCombo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).CorrectableCombo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_CorrectableEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).CorrectableEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/CorrectableEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).CorrectableEmpty(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_CorrectableEmpty2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).CorrectableEmpty2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/CorrectableEmpty2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).CorrectableEmpty2(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_CorrectableStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZorumsServiceServer).CorrectableStream(m, &zorumsServiceCorrectableStreamServer{stream})
}

type ZorumsService_CorrectableStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type zorumsServiceCorrectableStreamServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceCorrectableStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ZorumsService_CorrectableStreamPerNodeArg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZorumsServiceServer).CorrectableStreamPerNodeArg(m, &zorumsServiceCorrectableStreamPerNodeArgServer{stream})
}

type ZorumsService_CorrectableStreamPerNodeArgServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type zorumsServiceCorrectableStreamPerNodeArgServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceCorrectableStreamPerNodeArgServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ZorumsService_CorrectableStreamCustomReturnType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZorumsServiceServer).CorrectableStreamCustomReturnType(m, &zorumsServiceCorrectableStreamCustomReturnTypeServer{stream})
}

type ZorumsService_CorrectableStreamCustomReturnTypeServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type zorumsServiceCorrectableStreamCustomReturnTypeServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceCorrectableStreamCustomReturnTypeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ZorumsService_CorrectableStreamCombo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZorumsServiceServer).CorrectableStreamCombo(m, &zorumsServiceCorrectableStreamComboServer{stream})
}

type ZorumsService_CorrectableStreamComboServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type zorumsServiceCorrectableStreamComboServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceCorrectableStreamComboServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ZorumsService_CorrectableStreamEmpty_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZorumsServiceServer).CorrectableStreamEmpty(m, &zorumsServiceCorrectableStreamEmptyServer{stream})
}

type ZorumsService_CorrectableStreamEmptyServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type zorumsServiceCorrectableStreamEmptyServer struct {
	grpc.ServerStream
}

func (x *zorumsServiceCorrectableStreamEmptyServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ZorumsService_CorrectableStreamEmpty2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZorumsServiceServer).CorrectableStreamEmpty2(m, &zorumsServiceCorrectableStreamEmpty2Server{stream})
}

type ZorumsService_CorrectableStreamEmpty2Server interface {
	Send(*Response) error
	grpc.ServerStream
}

type zorumsServiceCorrectableStreamEmpty2Server struct {
	grpc.ServerStream
}

func (x *zorumsServiceCorrectableStreamEmpty2Server) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ZorumsService_OrderingQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingQC(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingPerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingPerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingPerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingPerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingCustomReturnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingCustomReturnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingCustomReturnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingCustomReturnType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingCombo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingCombo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingCombo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingCombo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingConcurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingConcurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingConcurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingConcurrent(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingUnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingUnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingUnaryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingUnaryRPC(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingUnaryRPCConcurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingUnaryRPCConcurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingUnaryRPCConcurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingUnaryRPCConcurrent(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingFuture(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingFuturePerNodeArg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingFuturePerNodeArg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingFuturePerNodeArg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingFuturePerNodeArg(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingFutureCustomReturnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingFutureCustomReturnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingFutureCustomReturnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingFutureCustomReturnType(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingFutureConcurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingFutureConcurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingFutureConcurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingFutureConcurrent(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_OrderingFutureCombo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).OrderingFutureCombo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/OrderingFutureCombo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).OrderingFutureCombo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Unicast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Unicast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Unicast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Unicast(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_Unicast2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).Unicast2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/Unicast2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).Unicast2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZorumsService_UnicastConcurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZorumsServiceServer).UnicastConcurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.ZorumsService/UnicastConcurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZorumsServiceServer).UnicastConcurrent(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZorumsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dev.ZorumsService",
	HandlerType: (*ZorumsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GRPCCall",
			Handler:    _ZorumsService_GRPCCall_Handler,
		},
		{
			MethodName: "QuorumCall",
			Handler:    _ZorumsService_QuorumCall_Handler,
		},
		{
			MethodName: "QuorumCallPerNodeArg",
			Handler:    _ZorumsService_QuorumCallPerNodeArg_Handler,
		},
		{
			MethodName: "QuorumCallCustomReturnType",
			Handler:    _ZorumsService_QuorumCallCustomReturnType_Handler,
		},
		{
			MethodName: "QuorumCallCombo",
			Handler:    _ZorumsService_QuorumCallCombo_Handler,
		},
		{
			MethodName: "QuorumCallEmpty",
			Handler:    _ZorumsService_QuorumCallEmpty_Handler,
		},
		{
			MethodName: "QuorumCallEmpty2",
			Handler:    _ZorumsService_QuorumCallEmpty2_Handler,
		},
		{
			MethodName: "Multicast",
			Handler:    _ZorumsService_Multicast_Handler,
		},
		{
			MethodName: "MulticastPerNodeArg",
			Handler:    _ZorumsService_MulticastPerNodeArg_Handler,
		},
		{
			MethodName: "Multicast2",
			Handler:    _ZorumsService_Multicast2_Handler,
		},
		{
			MethodName: "Multicast3",
			Handler:    _ZorumsService_Multicast3_Handler,
		},
		{
			MethodName: "Multicast4",
			Handler:    _ZorumsService_Multicast4_Handler,
		},
		{
			MethodName: "MulticastConcurrent",
			Handler:    _ZorumsService_MulticastConcurrent_Handler,
		},
		{
			MethodName: "QuorumCallFuture",
			Handler:    _ZorumsService_QuorumCallFuture_Handler,
		},
		{
			MethodName: "QuorumCallFuturePerNodeArg",
			Handler:    _ZorumsService_QuorumCallFuturePerNodeArg_Handler,
		},
		{
			MethodName: "QuorumCallFutureCustomReturnType",
			Handler:    _ZorumsService_QuorumCallFutureCustomReturnType_Handler,
		},
		{
			MethodName: "QuorumCallFutureCombo",
			Handler:    _ZorumsService_QuorumCallFutureCombo_Handler,
		},
		{
			MethodName: "QuorumCallFuture2",
			Handler:    _ZorumsService_QuorumCallFuture2_Handler,
		},
		{
			MethodName: "QuorumCallFutureEmpty",
			Handler:    _ZorumsService_QuorumCallFutureEmpty_Handler,
		},
		{
			MethodName: "QuorumCallFutureEmpty2",
			Handler:    _ZorumsService_QuorumCallFutureEmpty2_Handler,
		},
		{
			MethodName: "Correctable",
			Handler:    _ZorumsService_Correctable_Handler,
		},
		{
			MethodName: "CorrectablePerNodeArg",
			Handler:    _ZorumsService_CorrectablePerNodeArg_Handler,
		},
		{
			MethodName: "CorrectableCustomReturnType",
			Handler:    _ZorumsService_CorrectableCustomReturnType_Handler,
		},
		{
			MethodName: "CorrectableCombo",
			Handler:    _ZorumsService_CorrectableCombo_Handler,
		},
		{
			MethodName: "CorrectableEmpty",
			Handler:    _ZorumsService_CorrectableEmpty_Handler,
		},
		{
			MethodName: "CorrectableEmpty2",
			Handler:    _ZorumsService_CorrectableEmpty2_Handler,
		},
		{
			MethodName: "OrderingQC",
			Handler:    _ZorumsService_OrderingQC_Handler,
		},
		{
			MethodName: "OrderingPerNodeArg",
			Handler:    _ZorumsService_OrderingPerNodeArg_Handler,
		},
		{
			MethodName: "OrderingCustomReturnType",
			Handler:    _ZorumsService_OrderingCustomReturnType_Handler,
		},
		{
			MethodName: "OrderingCombo",
			Handler:    _ZorumsService_OrderingCombo_Handler,
		},
		{
			MethodName: "OrderingConcurrent",
			Handler:    _ZorumsService_OrderingConcurrent_Handler,
		},
		{
			MethodName: "OrderingUnaryRPC",
			Handler:    _ZorumsService_OrderingUnaryRPC_Handler,
		},
		{
			MethodName: "OrderingUnaryRPCConcurrent",
			Handler:    _ZorumsService_OrderingUnaryRPCConcurrent_Handler,
		},
		{
			MethodName: "OrderingFuture",
			Handler:    _ZorumsService_OrderingFuture_Handler,
		},
		{
			MethodName: "OrderingFuturePerNodeArg",
			Handler:    _ZorumsService_OrderingFuturePerNodeArg_Handler,
		},
		{
			MethodName: "OrderingFutureCustomReturnType",
			Handler:    _ZorumsService_OrderingFutureCustomReturnType_Handler,
		},
		{
			MethodName: "OrderingFutureConcurrent",
			Handler:    _ZorumsService_OrderingFutureConcurrent_Handler,
		},
		{
			MethodName: "OrderingFutureCombo",
			Handler:    _ZorumsService_OrderingFutureCombo_Handler,
		},
		{
			MethodName: "Unicast",
			Handler:    _ZorumsService_Unicast_Handler,
		},
		{
			MethodName: "Unicast2",
			Handler:    _ZorumsService_Unicast2_Handler,
		},
		{
			MethodName: "UnicastConcurrent",
			Handler:    _ZorumsService_UnicastConcurrent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CorrectableStream",
			Handler:       _ZorumsService_CorrectableStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CorrectableStreamPerNodeArg",
			Handler:       _ZorumsService_CorrectableStreamPerNodeArg_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CorrectableStreamCustomReturnType",
			Handler:       _ZorumsService_CorrectableStreamCustomReturnType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CorrectableStreamCombo",
			Handler:       _ZorumsService_CorrectableStreamCombo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CorrectableStreamEmpty",
			Handler:       _ZorumsService_CorrectableStreamEmpty_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CorrectableStreamEmpty2",
			Handler:       _ZorumsService_CorrectableStreamEmpty2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zorums.proto",
}
