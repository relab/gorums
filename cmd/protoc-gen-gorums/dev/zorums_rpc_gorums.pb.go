// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+d62f9a0e
// 	protoc            v5.29.3
// source: zorums.proto

package dev

import (
	context "context"
	gorums "github.com/relab/gorums"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

// GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
// they are added to the _grpc.pb.go generated file.
func (n *Node) GRPCCall(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "dev.ZorumsService.GRPCCall",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// An rpc method with only the broadcast option specified will create a
// server handler which can be used to broadcast. The handler will not
// be exposed to the client, only to server. Hence, it is named internal.
func (n *Node) BroadcastInternal(ctx context.Context, in *Request) (resp *emptypb.Empty, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "dev.ZorumsService.BroadcastInternal",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*emptypb.Empty), err
}

// The BroadcastCall is similar to a QuorumCall, but it enables the servers
// to send the response to a client-side server handler. I.e. the client
// needs to register a client-side server and register it.
//
// NOTE: this will NOT create a broadcast method, meaning servers cannot
// call this method (only clients)
func (n *Node) BroadcastWithClientHandler1(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "dev.ZorumsService.BroadcastWithClientHandler1",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// The BroadcastCall is similar to a QuorumCall, but it enables the servers
// to send the response to a client-side server handler. I.e. the client
// needs to register a client-side server and register it.
//
// NOTE: this will NOT create a broadcast method, meaning servers cannot
// call this method (only clients)
func (n *Node) BroadcastWithClientHandler2(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "dev.ZorumsService.BroadcastWithClientHandler2",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}

// The BroadcastCall is similar to a QuorumCall, but it enables the servers
// to send the response to a client-side server handler. I.e. the client
// needs to register a client-side server and register it.
//
// NOTE: this WILL create a broadcast method, meaning servers (and clients)
// can call this method
func (n *Node) BroadcastWithClientHandlerAndBroadcastOption(ctx context.Context, in *Request) (resp *Response, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "dev.ZorumsService.BroadcastWithClientHandlerAndBroadcastOption",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Response), err
}
