// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+87979cf3
// 	protoc            v6.30.2
// source: zorums.proto

package dev

import (
	gorums "github.com/relab/gorums"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

// A ZorumsServiceConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type ZorumsServiceConfiguration struct {
	gorums.RawConfiguration
}

// NewZorumsServiceConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewZorumsServiceConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *ZorumsServiceConfiguration, err error) {
	c = &ZorumsServiceConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubZorumsServiceConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *ZorumsServiceConfiguration) SubZorumsServiceConfiguration(cfg gorums.NodeListOption) (subCfg *ZorumsServiceConfiguration, err error) {
	subCfg = &ZorumsServiceConfiguration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// ZorumsServiceConfigurationFromRaw returns a new ZorumsServiceConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ZorumsServiceConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*ZorumsServiceConfiguration, error) {
	newCfg := &ZorumsServiceConfiguration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *ZorumsServiceConfiguration) Nodes() []*ZorumsServiceNode {
	rawNodes := c.RawConfiguration.Nodes()
	nodes := make([]*ZorumsServiceNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ZorumsServiceNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *ZorumsServiceConfiguration) AllNodes() []*ZorumsServiceNode {
	rawNodes := c.RawConfiguration.AllNodes()
	nodes := make([]*ZorumsServiceNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ZorumsServiceNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c ZorumsServiceConfiguration) And(d *ZorumsServiceConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c ZorumsServiceConfiguration) Except(rm *ZorumsServiceConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// A ZorumsNoQCServiceConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type ZorumsNoQCServiceConfiguration struct {
	gorums.RawConfiguration
}

// NewZorumsNoQCServiceConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewZorumsNoQCServiceConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *ZorumsNoQCServiceConfiguration, err error) {
	c = &ZorumsNoQCServiceConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubZorumsNoQCServiceConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *ZorumsNoQCServiceConfiguration) SubZorumsNoQCServiceConfiguration(cfg gorums.NodeListOption) (subCfg *ZorumsNoQCServiceConfiguration, err error) {
	subCfg = &ZorumsNoQCServiceConfiguration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// ZorumsNoQCServiceConfigurationFromRaw returns a new ZorumsNoQCServiceConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ZorumsNoQCServiceConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*ZorumsNoQCServiceConfiguration, error) {
	newCfg := &ZorumsNoQCServiceConfiguration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *ZorumsNoQCServiceConfiguration) Nodes() []*ZorumsNoQCServiceNode {
	rawNodes := c.RawConfiguration.Nodes()
	nodes := make([]*ZorumsNoQCServiceNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ZorumsNoQCServiceNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *ZorumsNoQCServiceConfiguration) AllNodes() []*ZorumsNoQCServiceNode {
	rawNodes := c.RawConfiguration.AllNodes()
	nodes := make([]*ZorumsNoQCServiceNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ZorumsNoQCServiceNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c ZorumsNoQCServiceConfiguration) And(d *ZorumsNoQCServiceConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c ZorumsNoQCServiceConfiguration) Except(rm *ZorumsNoQCServiceConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}
