// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.8.0-devel
// 	protoc            v5.29.2
// source: zorums.proto

package dev

import (
	fmt "fmt"
	gorums "github.com/relab/gorums"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(8 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 8)
)

// ZorumsServiceManager maintains a connection pool of nodes on
// which quorum calls can be performed.
type ZorumsServiceManager struct {
	*gorums.RawManager
}

// NewZorumsServiceManager returns a new ZorumsServiceManager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewZorumsServiceManager(opts ...gorums.ManagerOption) *ZorumsServiceManager {
	return &ZorumsServiceManager{
		RawManager: gorums.NewRawManager(opts...),
	}
} // NewZorumsServiceConfiguration returns a ZorumsServiceConfiguration based on the provided list of nodes (required)
// and a quorum specification
// .
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *ZorumsServiceManager) NewConfiguration(cfg gorums.NodeListOption, qspec ZorumsServiceQuorumSpec) (c *ZorumsServiceConfiguration, err error) {
	c = &ZorumsServiceConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, cfg)
	if err != nil {
		return nil, err
	}
	// return an error if qspec is nil.
	if qspec == nil {
		return nil, fmt.Errorf("config: missing required ZorumsServiceQuorumSpec")
	}
	c.qspec = qspec
	// initialize the nodes slice
	c.nodes = make([]*ZorumsServiceNode, c.Size())
	for i, n := range c.RawConfiguration {
		c.nodes[i] = &ZorumsServiceNode{n}
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *ZorumsServiceManager) Nodes() []*ZorumsServiceNode {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*ZorumsServiceNode, len(gorumsNodes))
	for i, n := range gorumsNodes {
		nodes[i] = &ZorumsServiceNode{n}
	}
	return nodes
}
