// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+94924590
// 	protoc            v6.30.2
// source: storage/proto/storage.proto

package proto

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// StorageClient is the client interface for the Storage service.
type StorageClient interface {
	ReadQC(ctx context.Context, in *ReadRequest) gorums.Responses[*ReadResponse]
	WriteQC(ctx context.Context, in *WriteRequest) gorums.Responses[*WriteResponse]
	WriteMulticast(ctx context.Context, in *WriteRequest, opts ...gorums.CallOption)
}

// enforce interface compliance
var _ StorageClient = (*StorageConfiguration)(nil)

// StorageNodeClient is the single node client interface for the Storage service.
type StorageNodeClient interface {
	ReadRPC(ctx context.Context, in *ReadRequest) (resp *ReadResponse, err error)
	WriteRPC(ctx context.Context, in *WriteRequest) (resp *WriteResponse, err error)
}

// enforce interface compliance
var _ StorageNodeClient = (*StorageNode)(nil)

// A StorageConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type StorageConfiguration struct {
	cfg *gorums.Configuration
}

func StorageConfigurationRpc(cfg *gorums.Configuration) StorageConfiguration {
	return StorageConfiguration{
		cfg: cfg,
	}
}

// Reference imports to suppress errors if they are not otherwise used.
var _ emptypb.Empty

// WriteMulticast is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c StorageConfiguration) WriteMulticast(ctx context.Context, in *WriteRequest, opts ...gorums.CallOption) {

	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "storage.Storage.WriteMulticast",
	}

	c.cfg.Multicast(ctx, cd, opts...)
}

// StorageNode holds the node specific methods for the Storage service.
type StorageNode struct {
	node *gorums.Node
}

func StorageNodeRpc(node *gorums.Node) StorageNode {
	return StorageNode{
		node: node,
	}
}

// ReadQC executes the Read Quorum Call on a configuration
// of Nodes and returns the most recent value.
func (c StorageConfiguration) ReadQC(ctx context.Context, in *ReadRequest) gorums.Responses[*ReadResponse] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "storage.Storage.ReadQC",
		ServerStream: false,
	}

	responses := c.cfg.QuorumCall(ctx, cd)
	return gorums.IterTypeCast[*ReadResponse](responses)
}

// WriteQC executes the Write Quorum Call on a configuration
// of Nodes and returns true if a majority of Nodes were updated.
func (c StorageConfiguration) WriteQC(ctx context.Context, in *WriteRequest) gorums.Responses[*WriteResponse] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "storage.Storage.WriteQC",
		ServerStream: false,
	}

	responses := c.cfg.QuorumCall(ctx, cd)
	return gorums.IterTypeCast[*WriteResponse](responses)
}

// ReadRPC executes the Read RPC on a single Node
func (n StorageNode) ReadRPC(ctx context.Context, in *ReadRequest) (resp *ReadResponse, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "storage.Storage.ReadRPC",
	}

	res, err := n.node.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*ReadResponse), err
}

// WriteRPC executes the Write RPC on a single Node
func (n StorageNode) WriteRPC(ctx context.Context, in *WriteRequest) (resp *WriteResponse, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "storage.Storage.WriteRPC",
	}

	res, err := n.node.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*WriteResponse), err
}

// StorageServer is the server-side API for the Storage Service
type StorageServer interface {
	ReadRPC(ctx gorums.ServerCtx, request *ReadRequest) (response *ReadResponse, err error)
	WriteRPC(ctx gorums.ServerCtx, request *WriteRequest) (response *WriteResponse, err error)
	ReadQC(ctx gorums.ServerCtx, request *ReadRequest) (response *ReadResponse, err error)
	WriteQC(ctx gorums.ServerCtx, request *WriteRequest) (response *WriteResponse, err error)
	WriteMulticast(ctx gorums.ServerCtx, request *WriteRequest)
}

// RegisterStorageServer adds rpc handler functions to a server,
// the handlers decide how the server responds when it receives
// a request from a client
func RegisterStorageServer(srv *gorums.Server, impl StorageServer) {
	srv.RegisterHandler("storage.Storage.ReadRPC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*ReadRequest)
		defer ctx.Release()
		resp, err := impl.ReadRPC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("storage.Storage.WriteRPC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*WriteRequest)
		defer ctx.Release()
		resp, err := impl.WriteRPC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("storage.Storage.ReadQC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*ReadRequest)
		defer ctx.Release()
		resp, err := impl.ReadQC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("storage.Storage.WriteQC", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*WriteRequest)
		defer ctx.Release()
		resp, err := impl.WriteQC(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("storage.Storage.WriteMulticast", func(ctx gorums.ServerCtx, in *gorums.Message, _ chan<- *gorums.Message) {
		req := in.Message.(*WriteRequest)
		defer ctx.Release()
		impl.WriteMulticast(ctx, req)
	})
}
