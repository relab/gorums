
{{/* Remember to run 'make dev' after editing this file. */}}

{{- if not .IgnoreImports}}
package {{.PackageName}}

import (
	"time"

	"golang.org/x/net/context"
	"golang.org/x/net/trace"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

{{- end}}

{{range $elm := .Services}}

{{if .Correctable}}

/* Exported correctable method {{.MethodName}} */

{{if .PerNodeArg}}

// {{.MethodName}} asynchronously invokes a 
// correctable {{.MethodName}} quorum call on each node in configuration c,
// with the argument returned by the provided perNode
// function and returns a {{.TypeName}}, which can be used
// to inspect the quorum call reply and error when available. 
// The perNode function takes the provided arg and returns a {{.FQReqName}}
// object to be passed to the given nodeID.
// The perNode function should be thread-safe.
func (c *Configuration) {{.MethodName}}(ctx context.Context, arg *{{.FQReqName}}, perNode func(arg {{.FQReqName}}, nodeID uint32) *{{.FQReqName}}) *{{.TypeName}} {
	corr := &{{.TypeName}}{
		level:   LevelNotSet,
		NodeIDs: make([]uint32, 0, c.n),
		donech:  make(chan struct{}),
	}
	go func() {
		c.{{.UnexportedMethodName}}(ctx, arg, perNode, corr)
	}()
	return corr
}

{{else}}

// {{.MethodName}} asynchronously invokes a
// correctable {{.MethodName}} quorum call on configuration c and returns a
// {{.TypeName}} which can be used to inspect any replies or errors
// when available.
func (c *Configuration) {{.MethodName}}(ctx context.Context, arg *{{.FQReqName}}) *{{.TypeName}} {
	corr := &{{.TypeName}}{
		level:   LevelNotSet,
		NodeIDs: make([]uint32, 0, c.n),
		donech:  make(chan struct{}),
	}
	go func() {
		c.{{.UnexportedMethodName}}(ctx, arg, corr)
	}()
	return corr
}

{{- end}}

// Get returns the reply, level and any error associated with the
// {{.MethodName}}. The method does not block until a (possibly
// itermidiate) reply or error is available. Level is set to LevelNotSet if no
// reply has yet been received. The Done or Watch methods should be used to
// ensure that a reply is available.
func (c *{{.TypeName}}) Get() (*{{.FQCustomRespName}}, int, error) {
	c.mu.Lock()
	defer c.mu.Unlock()
	return c.{{.CustomRespName}}, c.level, c.err
}

// Done returns a channel that's closed when the correctable {{.MethodName}}
// quorum call is done. A call is considered done when the quorum function has
// signaled that a quorum of replies was received or that the call returned an
// error.
func (c *{{.TypeName}}) Done() <-chan struct{} {
	return c.donech
}

// Watch returns a channel that's closed when a reply or error at or above the
// specified level is available. If the call is done, the channel is closed
// disregardless of the specified level.
func (c *{{.TypeName}}) Watch(level int) <-chan struct{} {
	ch := make(chan struct{})
	c.mu.Lock()
	if level < c.level {
		close(ch)
		c.mu.Unlock()
		return ch
	}
	c.watchers = append(c.watchers, &struct {
		level int
		ch    chan struct{}
	}{level, ch})
	c.mu.Unlock()
	return ch
}

func (c *{{.TypeName}}) set(reply *{{.FQCustomRespName}}, level int, err error, done bool) {
	c.mu.Lock()
	if c.done {
		c.mu.Unlock()
		panic("set(...) called on a done correctable")
	}
	c.{{.CustomRespName}}, c.level, c.err, c.done = reply, level, err, done
	if done {
		close(c.donech)
		for _, watcher := range c.watchers {
			if watcher != nil {
				close(watcher.ch)
			}
		}
		c.mu.Unlock()
		return
	}
	for i := range c.watchers {
		if c.watchers[i] != nil && c.watchers[i].level <= level {
			close(c.watchers[i].ch)
			c.watchers[i] = nil
		}
	}
	c.mu.Unlock()
}

/* Unexported correctable method {{.MethodName}} */

{{template "unexported_method_signature" . -}}
	{{- template "trace" .}}

	{{- template "callLoop" .}}

	var (
		replyValues = make([]*{{.FQRespName}}, 0, c.n)
		clevel      = LevelNotSet
		reply		*{{.FQCustomRespName}}
		rlevel      int
		errCount    int
		quorum      bool
	)

	for {
		select {
		case r := <-replyChan:
			resp.NodeIDs = append(resp.NodeIDs, r.nid)
			if r.err != nil {
				errCount++
				break
			}
			if c.mgr.opts.trace {
				ti.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
{{- if .QFWithReq}}
			reply, rlevel, quorum = c.qspec.{{.MethodName}}QF(a, replyValues)
{{else}}
			reply, rlevel, quorum = c.qspec.{{.MethodName}}QF(replyValues)
{{end -}}
			if quorum {
				resp.set(reply, rlevel, nil, true)
				return
			}
			if rlevel > clevel {
				clevel = rlevel
				resp.set(reply, rlevel, nil, false)
			}
		case <-ctx.Done():
			resp.set(reply, clevel, QuorumCallError{ctx.Err().Error(), errCount, len(replyValues)}, true)
			return
		}

		if errCount+len(replyValues) == expected {
			resp.set(reply, clevel, QuorumCallError{"incomplete call", errCount, len(replyValues)}, true)
			return
		}
	}
}

{{template "callGRPC" .}}

{{- end -}}
{{- end -}}
