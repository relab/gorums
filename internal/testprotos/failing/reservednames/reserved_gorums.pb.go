// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.9.0-devel+d97bfa83
// 	protoc            v6.30.2
// source: failing/reservednames/reserved.proto

package reservednames

import (
	context "context"
	gorums "github.com/relab/gorums"
	encoding "google.golang.org/grpc/encoding"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(9 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 9)
)

func init() {
	if encoding.GetCodec(gorums.ContentSubtype) == nil {
		encoding.RegisterCodec(gorums.NewCodec())
	}
}

// ReservedClient is the client interface for the Reserved service.
type ReservedClient interface {
	QuorumCall(ctx context.Context, in *Configuration) gorums.Responses[*Manager]
}

// enforce interface compliance
var _ ReservedClient = (*ReservedConfiguration)(nil)

// ReservedNodeClient is the single node client interface for the Reserved service.
type ReservedNodeClient interface {
	ConfTest(ctx context.Context, in *Configuration) (resp *Manager, err error)
}

// enforce interface compliance
var _ ReservedNodeClient = (*ReservedNode)(nil)

// A ReservedConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type ReservedConfiguration struct {
	gorums.RawConfiguration
}

// NewReservedConfiguration returns a configuration based on the provided list of nodes (required)
// and an optional quorum specification. The QuorumSpec is necessary for call types that
// must process replies. For configurations only used for unicast or multicast call types,
// a QuorumSpec is not needed.
// Nodes can be supplied using WithNodeMap or WithNodeList.
// Using any other type of NodeListOption will not work.
// The ManagerOption list controls how the nodes in the configuration are created.
func NewReservedConfiguration(cfg gorums.NodeListOption, opts ...gorums.ManagerOption) (c *ReservedConfiguration, err error) {
	c = &ReservedConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(cfg, opts...)
	if err != nil {
		return nil, err
	}
	return c, nil
}

// SubReservedConfiguration allows for making a new Configuration from the
// ManagerOption list and node list of another set of configurations,
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (c *ReservedConfiguration) SubReservedConfiguration(cfg gorums.NodeListOption) (subCfg *ReservedConfiguration, err error) {
	subCfg = &ReservedConfiguration{}
	subCfg.RawConfiguration, err = c.SubRawConfiguration(cfg)
	if err != nil {
		return nil, err
	}
	return subCfg, nil
}

// ReservedConfigurationFromRaw returns a new ReservedConfiguration from the given raw configuration.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ReservedConfigurationFromRaw(rawCfg gorums.RawConfiguration) (*ReservedConfiguration, error) {
	newCfg := &ReservedConfiguration{
		RawConfiguration: rawCfg,
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *ReservedConfiguration) Nodes() []*ReservedNode {
	rawNodes := c.RawConfiguration.Nodes()
	nodes := make([]*ReservedNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ReservedNode{n}
	}
	return nodes
}

// AllNodes returns a slice of each available node of all subconfigurations. Sorted by node id.
//
// NOTE: mutating the returned slice is not supported.
func (c *ReservedConfiguration) AllNodes() []*ReservedNode {
	rawNodes := c.RawConfiguration.AllNodes()
	nodes := make([]*ReservedNode, len(rawNodes))
	for i, n := range rawNodes {
		nodes[i] = &ReservedNode{n}
	}
	return nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c ReservedConfiguration) And(d *ReservedConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c ReservedConfiguration) Except(rm *ReservedConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// ReservedNode holds the node specific methods for the Reserved service.
type ReservedNode struct {
	*gorums.RawNode
}

// QuorumCall is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (c *ReservedConfiguration) QuorumCall(ctx context.Context, in *Configuration) gorums.Responses[*Manager] {
	cd := gorums.QuorumCallData{
		Message:      in,
		Method:       "gorums.testprotos.failing.reservednames.Reserved.QuorumCall",
		ServerStream: false,
	}

	return gorums.QuorumCall[*Manager](ctx, c.RawConfiguration, cd)
}

// ConfTest is a quorum call invoked on each node in configuration c,

// with the same argument in, and returns the responses as an iterator.
func (n *ReservedNode) ConfTest(ctx context.Context, in *Configuration) (resp *Manager, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "gorums.testprotos.failing.reservednames.Reserved.ConfTest",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Manager), err
}

// Reserved is the server-side API for the Reserved Service
type ReservedServer interface {
	ConfTest(ctx gorums.ServerCtx, request *Configuration) (response *Manager, err error)
	QuorumCall(ctx gorums.ServerCtx, request *Configuration) (response *Manager, err error)
}

func RegisterReservedServer(srv *gorums.Server, impl ReservedServer) {
	srv.RegisterHandler("gorums.testprotos.failing.reservednames.Reserved.ConfTest", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Configuration)
		defer ctx.Release()
		resp, err := impl.ConfTest(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("gorums.testprotos.failing.reservednames.Reserved.QuorumCall", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Configuration)
		defer ctx.Release()
		resp, err := impl.QuorumCall(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}
