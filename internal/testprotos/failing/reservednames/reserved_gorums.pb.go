// Code generated by protoc-gen-gorums. DO NOT EDIT.
// versions:
// 	protoc-gen-gorums v0.8.0-devel
// 	protoc            v5.29.2
// source: failing/reservednames/reserved.proto

package reservednames

import (
	context "context"
	fmt "fmt"
	gorums "github.com/relab/gorums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = gorums.EnforceVersion(8 - gorums.MinVersion)
	// Verify that the gorums runtime is sufficiently up-to-date.
	_ = gorums.EnforceVersion(gorums.MaxVersion - 8)
)

// ReservedClient is the client interface for the Reserved service.
type ReservedClient interface {
	QuorumCall(ctx context.Context, in *Configuration) (resp *Manager, err error)
}

// enforce interface compliance
var _ ReservedClient = (*ReservedConfiguration)(nil)

// ReservedNodeClient is the single node client interface for the Reserved service.
type ReservedNodeClient interface {
	ConfTest(ctx context.Context, in *Configuration) (resp *Manager, err error)
}

// enforce interface compliance
var _ ReservedNodeClient = (*ReservedNode)(nil)

// A ReservedConfiguration represents a static set of nodes on which quorum remote
// procedure calls may be invoked.
type ReservedConfiguration struct {
	gorums.RawConfiguration
	qspec ReservedQuorumSpec
	nodes []*ReservedNode
} // ReservedQuorumSpecFromRaw returns a new ReservedQuorumSpec from the given raw configuration and QuorumSpec.
//
// This function may for example be used to "clone" a configuration but install a different QuorumSpec:
//
//	cfg1, err := mgr.NewConfiguration(qspec1, opts...)
//	cfg2 := ConfigurationFromRaw(cfg1.RawConfig, qspec2)
func ReservedConfigurationFromRaw(rawCfg gorums.RawConfiguration, qspec ReservedQuorumSpec) (*ReservedConfiguration, error) {
	// return an error if qspec is nil.
	if qspec == nil {
		return nil, fmt.Errorf("config: missing required QuorumSpec")
	}
	newCfg := &ReservedConfiguration{
		RawConfiguration: rawCfg,
		qspec:            qspec,
	}
	// initialize the nodes slice
	newCfg.nodes = make([]*ReservedNode, newCfg.Size())
	for i, n := range rawCfg {
		newCfg.nodes[i] = &ReservedNode{n}
	}
	return newCfg, nil
}

// Nodes returns a slice of each available node. IDs are returned in the same
// order as they were provided in the creation of the Manager.
//
// NOTE: mutating the returned slice is not supported.
func (c *ReservedConfiguration) Nodes() []*ReservedNode {
	return c.nodes
}

// And returns a NodeListOption that can be used to create a new configuration combining c and d.
func (c ReservedConfiguration) And(d *ReservedConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.And(d.RawConfiguration)
}

// Except returns a NodeListOption that can be used to create a new configuration
// from c without the nodes in rm.
func (c ReservedConfiguration) Except(rm *ReservedConfiguration) gorums.NodeListOption {
	return c.RawConfiguration.Except(rm.RawConfiguration)
}

// ReservedManager maintains a connection pool of nodes on
// which quorum calls can be performed.
type ReservedManager struct {
	*gorums.RawManager
}

// NewReservedManager returns a new ReservedManager for managing connection to nodes added
// to the manager. This function accepts manager options used to configure
// various aspects of the manager.
func NewReservedManager(opts ...gorums.ManagerOption) *ReservedManager {
	return &ReservedManager{
		RawManager: gorums.NewRawManager(opts...),
	}
} // NewReservedConfiguration returns a ReservedConfiguration based on the provided list of nodes (required)
// and a quorum specification
// .
// Nodes can be supplied using WithNodeMap or WithNodeList, or WithNodeIDs.
// A new configuration can also be created from an existing configuration,
// using the And, WithNewNodes, Except, and WithoutNodes methods.
func (m *ReservedManager) NewConfiguration(cfg gorums.NodeListOption, qspec ReservedQuorumSpec) (c *ReservedConfiguration, err error) {
	c = &ReservedConfiguration{}
	c.RawConfiguration, err = gorums.NewRawConfiguration(m.RawManager, cfg)
	if err != nil {
		return nil, err
	}
	// return an error if qspec is nil.
	if qspec == nil {
		return nil, fmt.Errorf("config: missing required ReservedQuorumSpec")
	}
	c.qspec = qspec
	// initialize the nodes slice
	c.nodes = make([]*ReservedNode, c.Size())
	for i, n := range c.RawConfiguration {
		c.nodes[i] = &ReservedNode{n}
	}
	return c, nil
}

// Nodes returns a slice of available nodes on this manager.
// IDs are returned in the order they were added at creation of the manager.
func (m *ReservedManager) Nodes() []*ReservedNode {
	gorumsNodes := m.RawManager.Nodes()
	nodes := make([]*ReservedNode, len(gorumsNodes))
	for i, n := range gorumsNodes {
		nodes[i] = &ReservedNode{n}
	}
	return nodes
}

// ReservedNode holds the node specific methods for the Reserved service.
type ReservedNode struct {
	*gorums.RawNode
}

// ReservedQuorumSpec is the interface of quorum functions for Reserved.
type ReservedQuorumSpec interface {
	gorums.ConfigOption

	// QuorumCallQF is the quorum function for the QuorumCall
	// quorum call method. The in parameter is the request object
	// supplied to the QuorumCall method at call time, and may or may not
	// be used by the quorum function. If the in parameter is not needed
	// you should implement your quorum function with '_ *Configuration'.
	QuorumCallQF(in *Configuration, replies map[uint32]*Manager) (*Manager, bool)
}

// QuorumCall is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *ReservedConfiguration) QuorumCall(ctx context.Context, in *Configuration) (resp *Manager, err error) {
	cd := gorums.QuorumCallData{
		Message: in,
		Method:  "gorums.testprotos.failing.reservednames.Reserved.QuorumCall",
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Manager, len(replies))
		for k, v := range replies {
			r[k] = v.(*Manager)
		}
		return c.qspec.QuorumCallQF(req.(*Configuration), r)
	}

	res, err := c.RawConfiguration.QuorumCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Manager), err
}

// ConfTest is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (n *ReservedNode) ConfTest(ctx context.Context, in *Configuration) (resp *Manager, err error) {
	cd := gorums.CallData{
		Message: in,
		Method:  "gorums.testprotos.failing.reservednames.Reserved.ConfTest",
	}

	res, err := n.RawNode.RPCCall(ctx, cd)
	if err != nil {
		return nil, err
	}
	return res.(*Manager), err
}

// Reserved is the server-side API for the Reserved Service
type ReservedServer interface {
	ConfTest(ctx gorums.ServerCtx, request *Configuration) (response *Manager, err error)
	QuorumCall(ctx gorums.ServerCtx, request *Configuration) (response *Manager, err error)
}

func RegisterReservedServer(srv *gorums.Server, impl ReservedServer) {
	srv.RegisterHandler("gorums.testprotos.failing.reservednames.Reserved.ConfTest", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Configuration)
		defer ctx.Release()
		resp, err := impl.ConfTest(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
	srv.RegisterHandler("gorums.testprotos.failing.reservednames.Reserved.QuorumCall", func(ctx gorums.ServerCtx, in *gorums.Message, finished chan<- *gorums.Message) {
		req := in.Message.(*Configuration)
		defer ctx.Release()
		resp, err := impl.QuorumCall(ctx, req)
		gorums.SendMessage(ctx, finished, gorums.WrapMessage(in.Metadata, resp, err))
	})
}

type internalManager struct {
	nid   uint32
	reply *Manager
	err   error
}
