// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: ordering/ordering.proto

package ordering

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gorums_NodeStream_FullMethodName = "/ordering.Gorums/NodeStream"
)

// GorumsClient is the client API for Gorums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GorumsClient interface {
	// NodeStream is a stream that connects a client to a Node.
	// The messages that are sent on the stream contain both Metadata
	// and an application-specific message.
	NodeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Metadata, Metadata], error)
}

type gorumsClient struct {
	cc grpc.ClientConnInterface
}

func NewGorumsClient(cc grpc.ClientConnInterface) GorumsClient {
	return &gorumsClient{cc}
}

func (c *gorumsClient) NodeStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Metadata, Metadata], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gorums_ServiceDesc.Streams[0], Gorums_NodeStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Metadata, Metadata]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gorums_NodeStreamClient = grpc.BidiStreamingClient[Metadata, Metadata]

// GorumsServer is the server API for Gorums service.
// All implementations must embed UnimplementedGorumsServer
// for forward compatibility.
type GorumsServer interface {
	// NodeStream is a stream that connects a client to a Node.
	// The messages that are sent on the stream contain both Metadata
	// and an application-specific message.
	NodeStream(grpc.BidiStreamingServer[Metadata, Metadata]) error
	mustEmbedUnimplementedGorumsServer()
}

// UnimplementedGorumsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGorumsServer struct{}

func (UnimplementedGorumsServer) NodeStream(grpc.BidiStreamingServer[Metadata, Metadata]) error {
	return status.Errorf(codes.Unimplemented, "method NodeStream not implemented")
}
func (UnimplementedGorumsServer) mustEmbedUnimplementedGorumsServer() {}
func (UnimplementedGorumsServer) testEmbeddedByValue()                {}

// UnsafeGorumsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GorumsServer will
// result in compilation errors.
type UnsafeGorumsServer interface {
	mustEmbedUnimplementedGorumsServer()
}

func RegisterGorumsServer(s grpc.ServiceRegistrar, srv GorumsServer) {
	// If the following call pancis, it indicates UnimplementedGorumsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gorums_ServiceDesc, srv)
}

func _Gorums_NodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GorumsServer).NodeStream(&grpc.GenericServerStream[Metadata, Metadata]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gorums_NodeStreamServer = grpc.BidiStreamingServer[Metadata, Metadata]

// Gorums_ServiceDesc is the grpc.ServiceDesc for Gorums service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gorums_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.Gorums",
	HandlerType: (*GorumsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeStream",
			Handler:       _Gorums_NodeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ordering/ordering.proto",
}
