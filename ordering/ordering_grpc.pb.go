// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ordering

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GorumsClient is the client API for Gorums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GorumsClient interface {
	// NodeStream is a stream that connects a client to a Node.
	// The messages that are sent on the stream contain both Metadata
	// and an application-specific message.
	NodeStream(ctx context.Context, opts ...grpc.CallOption) (Gorums_NodeStreamClient, error)
}

type gorumsClient struct {
	cc grpc.ClientConnInterface
}

func NewGorumsClient(cc grpc.ClientConnInterface) GorumsClient {
	return &gorumsClient{cc}
}

func (c *gorumsClient) NodeStream(ctx context.Context, opts ...grpc.CallOption) (Gorums_NodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gorums_ServiceDesc.Streams[0], "/ordering.Gorums/NodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gorumsNodeStreamClient{stream}
	return x, nil
}

type Gorums_NodeStreamClient interface {
	Send(*Metadata) error
	Recv() (*Metadata, error)
	grpc.ClientStream
}

type gorumsNodeStreamClient struct {
	grpc.ClientStream
}

func (x *gorumsNodeStreamClient) Send(m *Metadata) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gorumsNodeStreamClient) Recv() (*Metadata, error) {
	m := new(Metadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GorumsServer is the server API for Gorums service.
// All implementations must embed UnimplementedGorumsServer
// for forward compatibility
type GorumsServer interface {
	// NodeStream is a stream that connects a client to a Node.
	// The messages that are sent on the stream contain both Metadata
	// and an application-specific message.
	NodeStream(Gorums_NodeStreamServer) error
	mustEmbedUnimplementedGorumsServer()
}

// UnimplementedGorumsServer must be embedded to have forward compatible implementations.
type UnimplementedGorumsServer struct {
}

func (UnimplementedGorumsServer) NodeStream(Gorums_NodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeStream not implemented")
}
func (UnimplementedGorumsServer) mustEmbedUnimplementedGorumsServer() {}

// UnsafeGorumsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GorumsServer will
// result in compilation errors.
type UnsafeGorumsServer interface {
	mustEmbedUnimplementedGorumsServer()
}

func RegisterGorumsServer(s grpc.ServiceRegistrar, srv GorumsServer) {
	s.RegisterService(&Gorums_ServiceDesc, srv)
}

func _Gorums_NodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GorumsServer).NodeStream(&gorumsNodeStreamServer{stream})
}

type Gorums_NodeStreamServer interface {
	Send(*Metadata) error
	Recv() (*Metadata, error)
	grpc.ServerStream
}

type gorumsNodeStreamServer struct {
	grpc.ServerStream
}

func (x *gorumsNodeStreamServer) Send(m *Metadata) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gorumsNodeStreamServer) Recv() (*Metadata, error) {
	m := new(Metadata)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gorums_ServiceDesc is the grpc.ServiceDesc for Gorums service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gorums_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.Gorums",
	HandlerType: (*GorumsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeStream",
			Handler:       _Gorums_NodeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ordering/ordering.proto",
}
