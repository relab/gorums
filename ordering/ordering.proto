syntax = "proto3";

package ordering;
option go_package = "github.com/relab/gorums/ordering";

import "google/rpc/status.proto";

service Gorums {
  // NodeStream is a stream that connects a client to a Node.
  // The messages that are sent on the stream contain both Metadata
  // and an application-specific message.
  rpc NodeStream(stream Metadata) returns (stream Metadata);
}

// Metadata is sent together with application-specific message types,
// and contains information necessary for Gorums to handle the messages.
message Metadata {
  uint64 MessageID = 1;
  string Method = 2; // uint32: 4 bytes
  google.rpc.Status Status = 3;
  BroadcastMsg BroadcastMsg = 4;
  AuthMsg AuthMsg = 5;
}

message BroadcastMsg {
  bool IsBroadcastClient = 1;
  uint64 BroadcastID = 2;
  string SenderAddr = 3; // bytes -> ipv4: 32 bit/ 4 bytes, ipv6: 128 bit / 16 bytes -> + Port: 16 bit / 2 bytes
  string OriginAddr = 4; // bytes -> ipv4: 32 bit/ 4 bytes, ipv6: 128 bit / 16 bytes -> + Port: 16 bit / 2 bytes
  string OriginMethod = 5; // uint32: 4 bytes
  bytes OriginDigest = 6;
  bytes OriginSignature = 7;
  string OriginPubKey = 8;
}

message AuthMsg {
  string PublicKey = 1;
  bytes Signature = 2;
  string Sender = 3;
}